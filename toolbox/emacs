#!zsh -li

[[ -z "$(echo $PATH|grep -E 'term[-]cmd')" ]] \
    && export PATH=/Users/admin/.emacs.d/term-cmd:$PATH

DEBUG=
VERBOSE=
START_FILE="~/.emacs.org/seth.org"
THIS_FILE="${@:0}"
THIS_PID="$(echo $$)"
ARGS="${@:1}"
FPATH="${@:${#@}}"
LOG_FILE=
PID_FILE="/Users/admin/SERVER3/run/pids/sv_emacs.pid"

if [[ $FPATH = socket ]]; then
    FPATH=
elif [[ $FPATH = $THIS_FILE ]] \
        || [ -z $(zsh -c "echo $FPATH|env grep -i -v -E ^\"[-]\"") ] \
    ; then
    FPATH=$START_FILE
fi

# ENV="PATH=/Users/admin/.emacs.d/term-cmd:$PATH"
ENV=
# OPTS="-f server-start --geometry=350x600"
OPTS="-f server-start --geometry=350x600 --visit $FPATH"
[[ -z $FPATH ]] && OPTS="-f server-start"

EMACS_CL="$ENV /usr/local/bin/emacs25-x --daemon $OPTS"
EMACS_CLIENT_CL="$ENV exec emacsclient"
EMACS_GUI="$EMACS_CL"
# EMACS_GUI="$ENV open -a /Applications/Emacs.app/Contents/MacOS/Emacs --args $OPTS"

# SET AS:  /usr/local/bin/emacs25-x -geometry 70x30 ~/.emacs.org/seth.org > /dev/null 2>&1 &


assign() {  eval "$1=\$(cat; echo .); $1=\${$1%.}"; }
get_socket(){

    if [[ $OS_NAME = Darwin ]]; then
        PROC_CMD="/opt/local/bin/pfind emacs 2>/dev/null|sed -r 's/^[ ]+//g'|cut -d ' ' -f1|head -n 1|tr -d ' \n'"
        SERVER_CMD=$EMACS_GUI
    elif [[ ($OS_NAME = Linux) && ($OS_NAME = Linux-arm) ]]; then
        PROC_CMD="env ps -C emacs25-x -o pid=|head -n 1|tr -d ' '"
        SERVER_CMD=$EMACS_CL
    fi
    [[ -n $DEBUG ]] && echo "ENV: $(env|sort)"
    [[ -n $VERBOSE ]] && echo "OS_NAME: $OS_NAME"
    [[ -n $VERBOSE ]] && echo "PROC_CMD: $PROC_CMD"
    [[ -n $VERBOSE ]] && echo "SERVER_CMD: $SERVER_CMD"
    assign SERVER < <(eval "$PROC_CMD" 2> /dev/null)
    [[ -n $VERBOSE ]] && echo "SERVER-1: --$SERVER--"
    if [[ -z $SERVER ]]; then
        [[ -n $VERBOSE ]] && echo "Starting (or will start) emacs daemon: '$SERVER_CMD'\n"
        assign SERVER_START < <(eval "$SERVER_CMD" 2> /dev/null)
        [[ -n $VERBOSE ]] && echo "SERVER_START: $SERVER_START"
        assign SERVER < <(eval "$PROC_CMD" 2> /dev/null)
        [[ -n $VERBOSE ]] && echo "SERVER-2: --$SERVER--"
        [[ -z $SERVER ]] && echo 'Issue starting emacs server' && exit 99
    fi
    echo "$SERVER" > "$PID_FILE"

    SOCKET="$(lsof -p $SERVER -F tn|grep -A 1 tunix|grep server|sed 's/^n//'|cut -d ' ' -f1)"
    [[ -n $VERBOSE ]] && echo "SOCKET: $SERVER"

    echo $SOCKET

    }
get_gui(){
    get_socket
    if [[ -n $SOCKET ]]; then
        [[ -n $VERBOSE ]] && echo echo "$ENV emacsclient -s $SOCKET -n -c $FPATH"
        # $ENV emacsclient -s $SOCKET -n -c $FPATH
        $EMACS_CLIENT_CL -s $SOCKET -n -c $FPATH
        # eval("$ENV emacsclient -s $SOCKET -n -c $FPATH")
    else
        echo "No socket for emacsclient"
    fi
    }
get_agenda(){
        # -nw                                                 \
assign AGENDA_CMD < <(cat <<-EOF
    (setq org-agenda-include-diary t)
    (sit-for 2)
    (org-gcal-fetch)
    (sit-for 2)
    (org-gcal-sync)
    (sit-for 2)
    (setq org-agenda-files (list "~/.emacs.org/seth.org" "~/.emacs.org/seth.t.chase@gmail.com.org"))
    (sit-for 2)
    (org-agenda-list)
    (sit-for 2)
    (org-agenda-day-view)
    (sit-for 2)
    (org-agenda-write "~/.emacs.org/org-agenda-today.html")
    (sit-for 2)
EOF
)

# emacsclient -c --eval -s /var/folders/mf/ctn20cl17y18z7fpcqm5gjnr0000gn/T/emacs501/server $AGENDA_CMD
    # ;;(kill-buffer)                                     \
    # emacs
    # emacs -q -nw -f describe-bindings -f kill-buffer-and-window --eval \(write-file /tmp/tmp_log\) -f kill-buffer
    #         (setq org-agenda-include-diary t)
    #         (sit-for 2)
    #         (org-gcal-fetch)
    #         (sit-for 2)
    #         (org-gcal-sync)
    #         (sit-for 2)
    # emacsclient \
    #     -c  \
    #     -s /var/folders/mf/ctn20cl17y18z7fpcqm5gjnr0000gn/T/emacs501/server  \
    #     --eval "\
    #         (setq org-agenda-files (list \"~/.emacs.org/seth.org\" \"~/.emacs.org/seth.t.chase@gmail.com.org\"))
    #         (org-agenda-list)
    #         (kill-buffer-and-window)
    #         (org-agenda-day-view)
    #         (save-buffers-kill-terminal)
    #         "
    }

if [[ $1 = socket ]]; then
    get_socket
elif [[ $1 = agenda ]]; then
    get_agenda
else
    get_gui
fi

# follow links

#

# if [[ -z $SOCKET ]]; then
#     kill -9 $SERVER
#     eval $SERVER_CMD
#     SERVER="$($PROC_CMD)"
#     [[ -z $SERVER ]] && echo 'Issue starting emacs server' && exit 99
# fi


# --batch                     do not do interactive display; implies -q
# --chdir DIR                 change to directory DIR
# --daemon                    start a server in the background
# --debug-init                enable Emacs Lisp debugger for init file
# --display, -d DISPLAY       use X server DISPLAY
# --no-desktop                do not load a saved desktop
# --no-init-file, -q          load neither ~/.emacs nor default.el
# --no-loadup, -nl            do not load loadup.el into bare Emacs
# --no-site-file              do not load site-start.el
# --no-x-resources            do not load X resources
# --no-site-lisp, -nsl        do not add site-lisp directories to load-path
# --no-splash                 do not display a splash screen on startup
# --no-window-system, -nw     do not communicate with X, ignoring $DISPLAY
# --quick, -Q                 equivalent to:
#                               -q --no-site-file --no-site-lisp --no-splash
#                               --no-x-resources
# --script FILE               run FILE as an Emacs Lisp script
# --terminal, -t DEVICE       use DEVICE for terminal I/O
# --user, -u USER             load ~USER/.emacs instead of your own
