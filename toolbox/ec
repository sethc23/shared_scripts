#!/usr/local/bin/zsh

# [[ $1 = emacs ]]                                                                                    \
#     && which osascript > /dev/null 2>&1 && osascript -e 'tell application "Emacs" to activate'      \
#     || /Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n -c "$@"

# [[ -z $EMACSCLIENT ]]       \
    # && _ec_client app

# fpath=$(realfullpath "$@")

# CMD=$(echo "$EMACSCLIENT -n -c $fpath")
# unset fpath

# echo "$CMD"
# eval "$CMD"

####################
#
# WORKING
#
#       ec -e '(org-open-link-from-string "[[~/.emacs.d/private/org/collections/android.org::#Org-074b9aab-d74a-472f-a14d-b96c05b05d77]]")' -e '(delete-other-windows)'
#
#       echo "$(cat <<-'EOF'
#       /usr/local/bin/ec -e '(org-open-link-from-string "[[~/.emacs.d/private/org/collections/android.org::#Org-074b9aab-d74a-472f-a14d-b96c05b05d77]]")' -e '(delete-other-windows)'
#       EOF
#       )"| base64 | ssh admin 'source /etc/environment; cat | base64 -d > /tmp/tmp; chmod +x /tmp/tmp; DISPLAY=:0 EMACS_EXEC_TYPE=app zsh -l /tmp/tmp; rm /tmp/tmp;'
#
####################

echo "$@" >> /tmp/capt_test
ALL_ARGS=()
for arg in $@; do ALL_ARGS+=($arg); done
echo "\n\nALL_ARGS len: ${#ALL_ARGS}\n\n" >> /tmp/capt_test

if [[ ${#ALL_ARGS} = 1 ]]; then

    INPUT="'"$@"'"

elif [[ ( -z $(echo "$@"|grep protocol|grep capture) ) && ( -z $PGSYSCONFDIR ) ]]; then

    set --
    INPUT=()
    pt=1
    for arg in $ALL_ARGS; do
        let pt=pt+1
        case "$arg" in

            "--eval" | "-e")
                set -- "$@" "-e";
                INPUT+=("-e");
                INPUT+=("'${ALL_ARGS[$pt]}'");
                ;;

            # "--help")   set -- "$@" "-H" ;;
            # *)         INPUT+=("$arg"); ;;

            *)          set -- "$@" "$arg"; #set -- "$NEW" "$arg";
                        ;;
        esac
    done
else
    INPUT=$@
fi




# OUT=">>/tmp/test"
# OUT=

# echo "\n\n" $OUT
# for it in $INPUT; do echo ">> $it <<" $OUT; done
# echo "@: $@" $OUT
# echo "INPUT: $INPUT" $OUT
# # echo "NEW: $NEW" $OUT
# echo "\n\n" $OUT

# return

source $HOME_ENV/.scripts/shell_env/shared/services/emacs

EMACS_DISPLAY=
EMACS_SOCKET=$(e-get-x11-socket)
if [[ $(uname -o) = Darwin ]]; then

    [[ -n "$EMACS_EXEC" ]]              \
        && EXEC="$EMACS_EXEC"           \
        || EXEC="/opt/local/bin/emacsclient"

    if [[ -n $EMACS_EXEC_TYPE ]]; then
        if [[ $EMACS_EXEC_TYPE = app ]]; then
            EXEC="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
            EMACS_SOCKET=$(e-get-socket)
        elif [[ $EMACS_EXEC_TYPE = x11 ]]; then
            EXEC="/opt/local/bin/emacsclient"
            # EMACS_SOCKET=$(e-get-x11-socket)
        fi
    fi

    [[ -n "$DISPLAY" ]]                 \
        && EMACS_DISPLAY="-d :0"

elif [[ $(uname -o) = GNU/Linux ]]; then
    EXEC="/usr/local/bin/emacsclient"

    [[ -n "$DISPLAY" ]]                 \
        && EMACS_DISPLAY="-d $DISPLAY"  \
        || EMACS_DISPLAY="-d :51"

    #
    # EMACS_SOCKET=$(e-get-protocol-socket)
    #
    # EMACS_SOCKET=$(e-get-x11-socket)
    EMACS_SOCKET="/tmp/emacs1000/ub2-x11-server"
    #
    # /usr/local/bin/emacsclient -n -c -d :51 $@ -s /tmp/emacs1000/ub2-x11-server
    #

fi


CMD="$EXEC -n -c $INPUT $EMACS_DISPLAY -s $EMACS_SOCKET"
echo "$CMD" >> /tmp/capt_test

[[ -n "$EMACS_SOCKET" ]]                        \
    && eval $CMD                                \
    || echo "emacsclient socket not found"
