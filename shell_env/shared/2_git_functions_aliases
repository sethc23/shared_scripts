#  --  Git Status (g-s*):
alias g-s='git status'
alias g-s-STAGED='git diff --name-only --cached | more'
alias g-s-p='git status --porcelain'
alias g-s-p-STAGED='git diff --name-status --cached | more'
alias g-s-UNSTAGED_ALL='git diff --stat --name-only'
alias g-s-UNTRACKED='git status --porcelain | grep -E "\?\?" | awk '\''{print }'\'' | tr '\''??'\'' '\'' '\'''
alias g-NOT_STAGED="git diff --name-only | more"
alias g-NOT_STAGED-MOD="git diff --name-status | more | grep ^M | sed 's/^M\s*//g'"
function g-S-DIFF-ADDED_MODDED() { git diff $1 --name-status | grep -v ^D | sed 's/^[A-Z]\s*//g';}
# git diff 7f7a2a7 --name-status | grep -v ^D | sed 's/^[A-Z]\s*//g' | xargs -I '{}' git checkout 7f7a2a7 -- {}
function g-s-DIFF-REMOVED() { git diff $1 --name-status | grep ^D | sed 's/^M\s*//g';}
alias g-b='git branch -avv'
alias g-b-DELETE='git branch -d'
alias g-b-r-DELETE='git branch --remotes --delete'
alias g-c='git commit -m'
alias g-ch-n='git checkout -b'
alias g-f-MODIFIED="g-s-p | grep '^ M ' | awk '{print $2}'"
alias g-i='git update-index --assume-unchanged --'
alias g-i-UNTRACKED='git ls-files -o --exclude-standard | xargs git ignore'
alias g-i-FOLDER='git ls-files -z | xargs -0 git update-index --assume-unchanged'
alias g-i-LIST='git ls-files -v | grep "^[[:lower:]]"'
alias g-l='git log --graph --decorate --pretty=oneline --abbrev-commit --all'
alias g-r-c="g-s-p | grep '^ D ' | sed 's/^\sD\s//' | xargs git rm --cached --ignore-unmatch -r -f --"
alias g-r="g-s-p | grep '^ D ' | sed 's/^\sD\s//' | xargs git rm --ignore-unmatch -r -f --"
alias g-r-REMAINING_UNSTAGED_ALL='git diff --stat --name-only | xargs git rm --cached --ignore-unmatch -f -r --'
alias g-r-REMAINING_UNSTAGED_DELETED='git status --porcelain | grep "^ D " | sed "s/ [A-Z] //g" | xargs -I '{}' git rm -q --cached --ignore-unmatch -f -r -- {} > /dev/null 2>&1'
alias g-a='g-r-REMAINING_UNSTAGED_DELETED && git add --ignore-removal -- .'
alias g-r-IGNORED='cat .gitignore | xargs git rm --cached -r --ignore-unmatch -q --'
alias g-r-UNSTAGED-UNTRACK="g-not_staged | awk '{print $2}' | xargs git update-index --remove --ignore-missing --force-remove --assume-unchanged --skip-worktree --again -q --"
alias g-reset-FLAGS="git ls-files -o | sed -r "s/'/\\\'/" | grep -v /$ | xargs -I '{}' printf '"%s"\n' {} | xargs -I '{}' git add --ignore-removal -- {}"
alias g-reset-ALL_FLAGS='for i in 1 2 3 4 5 6; do find ./SERVER$i/. -type f -name "*" -print0 | xargs -0 git add -f --; done'
alias g-CLONE='git clone --recursive'
alias g-SPARSE_UPDATE='git read-tree -mu HEAD'
alias g-RESTORE_LOCAL='g-restore_local_f'
alias g-UNTRACK='git update-index --remove --ignore-missing --force-remove --assume-unchanged -q --'
function g_add_commit_push() { git add --ignore-removal -- .; \
    if [ $(git diff --stat --name-only | wc -l) -gt 0 ]; then \
        git diff --stat --name-only | xargs -0 git rm --cached --ignore-unmatch -f -r --; \
        git status --porcelain | grep "^ D " | sed "s/ [A-Z] //g" | xargs git rm --cached --ignore-unmatch -f -r -- ; \
    fi;
    git commit -m "$1"; \
    sleep 1; \
    git push ; \
    git status; }
alias g-X='g_add_commit_push'

#  --  Git Submodules (gs-*):
alias gs-s='git submodule foreach --recursive git branch -avv'
alias gs-p='git pull && git submodule init && git submodule update && git submodule status'

# new submodule example
# git submodule add --name seamless_yelp_scraping -- git@github.com:sethc23/seamless_yelp_scrapi
# git submodule add -b custom --name PastebinPython -f -- git@github.com:sethc23/PastebinPython.
# git submodule add -- git@github.com:sethc23/aporo aporo


#  --  Dev Branch (g-D*):
function g_push_dev_and_master() { \
    g_add_commit_push; \
    dev_branch=`git rev-parse --abbrev-ref HEAD`; \
    git checkout master; \
    #git merge --stat --no-edit -X theirs \
    #    $(git branch -v | sed -r 's/(\*|\s) //' | \
    #        grep ^dev | sed -r 's/^(dev\s*)([A-Za-z0-9]+)\s(.*)$/\2/'); \
    git merge `git log --pretty=format:'%h' -n 1` $dev_branch; \
    git push; \
    git checkout dev;\
    git branch -avv; }
alias g-DX='g_push_dev_and_master'


function g-init_w_descr() { git init; rm .git/config; cd .git; \
    cp ~/.gitconfig ./config; cd ..; emacs .git/config; \
    git-hub create --desc="$1"; \
    pwd | sed -r 's/.*\/([^\/]+)$/\1/g' | xargs -I '{}' git remote add github git@github.com:sethc23/{}.git; \
    git push github master; \
    git branch --set-upstream-to=github/master; \
    git checkout -b dev && git push github dev; \
    git branch --set-upstream-to=github/dev; \
    git branch -avv; }
    

#  --  Git Commit (g-c_*):
function g-c_EMAIL() { git show -s --format=%ce $1 | head -n 1; }
function g-c_DATE() { git show -s --format=%ai $1 | head -n 1; }
function g-c_DATE_EPOCH() { git show -s --format=%at $1 | head -n 1; }

#  --  Git Blog (g-B*)
alias gb-serve='cd $BD/sethc23.github.io && rm -fr _site && bundle install && bundle exec jekyll serve --drafts'

# Exemplar Gist
# -- Update Gist
# sed -n '6354,6848p' f_postgres.py | sed -r 's/^            //g' | gist -u d2ea443dee86c22d201f -f turnstile_funct.py -
# -- New Gist
# sed -n '1348,1457p' f_postgres.py | sed -r 's/^            //g' | gist -f turnstile_funct.py -d "f(x) z_get_string_dist" -


# rebasing technique
# git rebase -i -p {first commit with err}
# git commit --amend --author "sethc23 <sethc23@users.noreply.github.com>" --no-edit && git reba