#!/usr/bin/env zsh

uuidgen(){ echo $(python2.7 -c 'from uuid import uuid4; print(uuid4().hex[:7])'); }
x11-active () {
    [[ $OS_NAME = Linux ]] && env ls -1 /tmp/.X11-unix
    }
vnc_clean () {
    _idx="$1"
    running_pid="$(/bin/ps -awwx -o pid,ppid,comm,args      \
        | env grep -i -E "Xtightvnc[ ][:]$_idx"             \
        | column -t | tr -s " "                             \
        | cut -d ' ' -f1 | tr -s " "
        )"
    [[ -n $running_pid ]] && kill -9 $running_pid
    rm -fr "/tmp/.X$_idx-lock" "/tmp/.X11-unix/X$_idx"
    }
vnc_reset () {
    _idx="$1"
    vnc_clean $_idx
    eval "vncserver :$_idx"
    }


alias e-src="source $HOME_ENV/.scripts/shell_env/shared/services/emacs"
e-ps(){
    /bin/ps -awwx -o %cpu,%mem,start,etime,user,group,ppid,pid,tty,comm,args \
    | grep -E "[e]mac";
    }
e-cmd (){
    /home/ub2/SERVER2/emacs/manage $@
    }
e-get-protocol-socket(){

    if [[ $(uname -o) = Darwin ]]; then
        cut_col=8
    elif [[ $(uname -o) = GNU/Linux ]]; then
        cut_col=9
    fi

    EMACS_SOCKET=$(sudo lsof -U | grep emacs                \
                    | grep protocol| grep unix | uniq       \
                    | grep '/'| column -t | tr -s " "       \
                    | cut -d ' ' -f$cut_col | head -n 1)
    [[ -n $EMACS_SOCKET ]]              \
        && echo $EMACS_SOCKET           \
        || echo "not available"
    }
e-get-x11-socket(){

    if [[ $(uname -o) = Darwin ]]; then
        cut_col=8
    elif [[ $(uname -o) = GNU/Linux ]]; then
        cut_col=9
    fi

    EMACS_SOCKET=$(sudo lsof -U | grep emacs                \
                    | grep x11| grep unix | uniq            \
                    | grep '/'| column -t | tr -s " "       \
                    | cut -d ' ' -f$cut_col | head -n 1)
    [[ -n $EMACS_SOCKET ]]              \
        && echo $EMACS_SOCKET           \
        || echo "not available"
    }
e-get-socket(){

    if [[ $(uname -o) = Darwin ]]; then
        cut_col=8
    elif [[ $(uname -o) = GNU/Linux ]]; then
        cut_col=9
    fi

    EMACS_SOCKET=$(sudo lsof -U|grep emacs                  \
                    | grep unix | uniq | grep -v x11        \
                    | grep '/'|column -t | tr -s " "        \
                    | cut -d ' ' -f$cut_col | head -n 1)
    [[ -n $EMACS_SOCKET ]]              \
        && echo $EMACS_SOCKET           \
        || echo "not available"
    }
e-get-socket-wait(){
    while [[ $(e-get-socket) = "not available" ]]; do
        echo -n "."
        sleep 1
    done
    [[ ! $(e-get-socket) = "not available" ]] \
        && echo 'READY!'
    }
e-get-x11-socket-wait(){
    while [[ $(e-get-x11-socket) = "not available" ]]; do
        echo -n "."
        sleep 1
    done
    [[ ! $(e-get-x11-socket) = "not available" ]] \
        && echo 'READY!'
    }
_ec_client(){

    if [[ $(uname -o) = Darwin ]]; then

        if [[ $1 = app ]]; then
            echo "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
        elif [[ $1 = x11 ]]; then
            echo "/opt/local/bin/emacsclient"
        fi

    elif [[ $(uname -o) = GNU/Linux ]]; then

        if [[ $1 = x11 ]]; then
            export ALTERNATE_EDITOR=$(_ec_client protocol)
            echo "/usr/local/bin/emacsclient"
        elif [[ $1 = protocol ]]; then
            echo "/usr/local/bin/emacsclient"
        fi

    fi

    # DARWIN/admin ONLY


    }
ecapp(){
    args=$@
    last_arg=${@:$#}
    if [[ -f $last_arg ]]; then
        except_last_arg=${@:1:${#}-1}
        _fpath="$(/usr/local/bin/realfullpath "$last_arg")"
        args="$except_last_arg $_fpath"
    fi
    export EMACSCLIENTapp="$(_ec_client app)"
    $EMACSCLIENTapp -n -c $args -s $(e-get-socket);
    }
ecx11(){
    args=$@
    last_arg=${@:$#}
    if [[ -f $last_arg ]]; then
        except_last_arg=${@:1:${#}-1}
        _fpath="$(/usr/local/bin/realfullpath "$last_arg")"
        args="$except_last_arg $_fpath"
    fi
    export EMACSCLIENTx11="$(_ec_client x11)"
    # echo "$EMACSCLIENTx11 -n -c $args -s $(e-get-x11-socket)"
    $EMACSCLIENTx11 -n -c $args -s $(e-get-x11-socket)
    }
ecxp(){
    args=$@
    last_arg=${@:$#}
    if [[ -f $last_arg ]]; then
        except_last_arg=${@:1:${#}-1}
        _fpath="$(/usr/local/bin/realfullpath "$last_arg")"
        args="$except_last_arg $_fpath"
    fi
    export EMACSCLIENTprotocol="$(_ec_client protocol)"
    $EMACSCLIENTprotocol -n -c $args -s $(e-get-protocol-socket);
    }

e-osx-toggle-org-share(){
    ORIG_DIR="$HOME_ENV/.emacs.d/private/org"
    TMP_DIR="$HOME_ENV/.emacs.d_private_org"

    if [[ ! -d $ORIG_DIR ]]; then
        mv ~/.emacs.d/private/org ~/.emacs.d_private_org
        ssh_f ub2
        ln -nfs /Volumes/ub2/home/ub2/.emacs.d/private/org $HOME_ENV/.emacs.d/private/org
    else
        echo "\nShould have warning here about existing open connection..."
        unlink $HOME_ENV/.emacs.d/private/org
        mv $HOME_ENV/.emacs.d_private_org $HOME_ENV/.emacs.d/private/org
    fi
    unset ORIG_DIR
    unset TMP_DIR
    }
e-osx-app-daemon(){
    #
    # NOT NOT NOT WORKING service.plist COMMAND:
    #   /Applications/Emacs.app/Contents/MacOS/Emacs --daemon --eval \"(server-start)\"
    #
    #

    export EMACSCLIENTapp="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"


    open /Applications/Emacs.app --args --eval "(progn (setq custom-file \"~/.emacs.d/private/init/osx-app-custom-settings.el\") (setq user-init-file \"/Users/admin/.emacs.d/private/init/osx-app-CUSTOM_CONFIG.el\") (load user-init-file)  (load custom-file t))"

    # LASRT WAS WORKING
    #     /usr/bin/osascript -e "$(cat <<EOF
    #     do shell script "/Applications/Emacs.app/Contents/MacOS/Emacs --eval '(progn (setq custom-file \"/Users/admin/.emacs.d/private/init/osx-app-custom-settings.el\") (setq user-init-file \"/Users/admin/.emacs.d/private/init/osx-app-CUSTOM_CONFIG.el\") (load user-init-file) (load custom-file t) )' > /dev/null 2>&1 &"
    # EOF
    # )"  > /dev/null 2>&1 &

    # /Applications/Emacs.app/Contents/MacOS/Emacs \
    #     --eval "(progn                                                                                      \
    #               (setq custom-file \"/Users/admin/.emacs.d/private/init/osx-app-custom-settings.el\")      \
    #               (setq user-init-file \"/Users/admin/.emacs.d/private/init/osx-app-CUSTOM_CONFIG.el\")     \
    #               (load user-init-file)                                                                     \
    #               (load custom-file t)                                                                      \
    #               )" \
    #     > /dev/null 2>&1 &

        # --daemon                                                                                    \
    # /Applications/Emacs.app/Contents/MacOS/Emacs                                                    \
    #     --load /Users/admin/.emacs.d/private/init/alt_cfg/CUSTOM_CONFIG_mac-pseudo-daemon-mode.el   \
    # > /dev/null 2>&1 &

    # _ec_client app

    }
e-osx-x11-daemon(){


    if [[ $1 = unload ]]; then

        sudo launchctl stop gnu.emacs.daemon.plist
        sudo launchctl unload /Library/LaunchDaemons/gnu.emacs.daemon.plist
        SVR_CFG=$(e-get-x11-socket)
        if [[ "$SVR_CFG" != "not available" ]]; then
            rm "$SVR_CFG"
        fi
        PID=$(sudo launchctl list|grep emacs|column -t | tr -s " "|cut -d ' ' -f-1| sed -r 's/-[\s]//g')
        [[ -n $PID ]] && sudo kill -9 $PID
        ps | grep -E "[e]macs"
        return

    elif [[ $1 = load ]]; then
        # /Library/LaunchDaemons/gnu.emacs.daemon.plist: service already loaded
        sudo launchctl load -w /Library/LaunchDaemons/gnu.emacs.daemon.plist
        sudo launchctl start gnu.emacs.daemon.plist
        e-get-x11-socket-wait
        return

    elif [[ $1 = start ]]; then

        /opt/local/bin/emacs-25.3                                                                               \
            --eval "(progn                                                                                      \
                      (setq user-init-file \"/Users/admin/.emacs.d/private/org/config/init/CUSTOM_CONFIG.el\")  \
                      (load user-init-file)                                                                     \
                      )"                                                                                        \
            --daemon                                                                                            \
            > /dev/null 2>&1 &
        return
    fi

    # WORKING service.plist COMMAND:
    #   /opt/local/bin/emacs-25.2 --daemon --eval \"(server-start)\"

    # /opt/local/bin/emacs --daemon --eval '(server-start)' > /dev/null 2>&1 &
    # /opt/local/bin/emacs --daemon > /dev/null 2>&1 &
    # /opt/local/bin/emacs ~/org/organizer.org > /dev/null 2>&1 &
    # sudo su admin -c "/opt/local/bin/emacs --daemon --eval \"(server-start)\" > /dev/null 2>&1 &"

    # /opt/local/bin/emacs-25.2 --load /Users/admin/.emacs.d/private/init/_settings/osx-x11-CUSTOM_CONFIG.el

    # _ec_client x11

    # ec(){
    #     [[ -z $EMACSCLIENT ]] && _ec_client app
    #     $EMACSCLIENT -n -c "$(realfullpath \"$@\")";
    #     }

    # export ec

    }

e-custom-2 () {
    NEW_FNAME=$(echo "$(uuidgen).org")
    emacsclient --create-frame ~/.emacs.d/private/org/tocapture/$NEW_FNAME
    }
e-custom-1(){
    for i in $(env ls); do
        NEW_FNAME=$(echo "$i.org")
        mv $i $NEW_FNAME
        emacsclient --create-frame $NEW_FNAME
    done
    }
e-cask-full-update(){
    _from_dir=$(pwd)
    cd ~/.emacs.d
    ORIG_PATH="$(echo $PATH)"
    export PATH=/home/ub2/.emacs.d/term-cmd:$PATH
    cask --debug --verbose upgrade-cask
    cask --debug --verbose upgrade
    cask --debug --verbose update
    cask --debug --verbose install
    cask --debug --verbose clean-elc
    env find -L .cask/25.3/elpa -name "*elc" -delete
    cask build
    cd "$_from_dir"
    unset _from_dir
    export PATH=$ORIG_PATH
    unset ORIG_PATH
    }
e-repo-pull(){
    EMACS_DIR="~/.emacs.d"
    for d in                              \
        "$EMACS_DIR/private/org"          \
        "$EMACS_DIR/private/snippets"     \
        "$EMACS_DIR/private"              \
        "$EMACS_DIR"                      \
    ; do
        cd "$d"
        git pull
    done
    }
e-recompile(){
    _start(){
        CWD=$(pwd)
        cd $HOME_ENV/.emacs.d
        [[ $(uname -o) = Darwin ]] \
            && ln -nfs /usr/local/bin/emacs-25.1-x11 /usr/local/bin/emacs
            # && ln -nfs /Applications/MacPorts/Emacs.app/Contents/MacOS/Emacs /usr/local/bin/emacs
        ORIG_PATH="$(echo $PATH)"
        export PATH=/home/ub2/.emacs.d/term-cmd:$PATH
        }
    _end(){
        ln -nfs $HOME_ENV/.scripts/toolbox/emacs /usr/local/bin/emacs
        cd $CWD
        unset CWD
        export PATH=$ORIG_PATH
        unset ORIG_PATH
        }
    _error(){
        echo "\nERROR\n";
        _end;
        return 0;
        }
    _start
    #find ~/.emacs.d -type f -regex ".*elc$" | xargs -I '{}' rm -fr {}
    find ~/.emacs.d/.cask/25.3/elpa -name "*elc" -delete
    # find /usr/local/share/emacs/25.1 -type f -regex ".*elc$"|xargs -I '{}' rm -fr {}
    echo '\nCLEANING'       && make clean       || return _error
    echo '\nMAKE'           && make             || return _error
    echo '\nCOMPILE\n'      && make compile     || return _error
    echo '\nAUTOLOADS\n'    && make autoloads   || return _error
    echo '\nSNIPPETS\n'     && make snippets    || return _error
    _end
    }
e-recompile-2 () {
    _from_dir=$(pwd)
    cd ~/.emacs.d
    ORIG_PATH="$(echo $PATH)"

    env find -L ./core -name "*elc" -delete
    env find -L ./private -name "*elc" -delete
    env find -L . -maxdepth 1 -name "*elc" -delete
    make clean
    make; make compile; make autoloads; make snippets

    cd "$_from_dir"
    unset _from_dir
    export PATH=$ORIG_PATH
    unset ORIG_PATH
    }
e-convert-md-org(){
    split_path(){
        if [[ $(basename "$1") = "$1" ]]; then
            _dir=$(pwd)
            _fname="$1"
        else
            _dir=$(dirname "$1")
            _fname=$(basename "$1")
        fi
        [[ -n $VERBOSE ]] && echo "_dir: $_dir"
        [[ -n $VERBOSE ]] && echo "_fname: $_fname"
    }
    [[ (-z $1) || ("$1" = "-h") || ("$1" = "--help") ]]                                     \
        && echo ""                                                                          \
        && echo "Usage:"                                                                    \
        && echo "\temacs e-convert-md-org README.md"                                        \
        && echo "\temacs e-convert-md-org /some/dir/README.md"                              \
        && echo "\temacs e-convert-md-org /some/dir/README.md /some/other/dir/README.org"   \
        && echo ""                                                                          \
        && return

    _from="$1"
    _to="$2"

    split_path "$_from"
    _from_dir=$_dir
    _from_fname=$_fname

    split_path "$_to"
    _to_dir=$_dir
    _to_fname=$_fname

    [[ -z $_to_fname ]]                                                                     \
        && _to_fname=$(echo $_from|sed -r 's/^(.*)[.](md|MD|markdown)$/\1.org/')

    _from="$_from_dir/$_from_fname"
    _to="$_to_dir/$_to_fname"

    [[ -n $VERBOSE ]] && echo "pandoc -f markdown -t org -o \"$_to\" \"$_from\""
    [[ -n $VERBOSE ]] && echo  "$_from -- $_to"
    pandoc -f markdown -t org -o "$_to" "$_from"
    }
e-agenda-export(){ $HOME_ENV/org/scripts/gen-org-agenda-today; }


e-emacs_print_packages(){
    _DISPLAY=:61

    _DISPLAY_NUM=$(echo $_DISPLAY|cut -d ':' -f2|tr -d ' ')
    vnc_reset $_DISPLAY_NUM > /dev/null 2>&1

    TMP_FPATH_1="/tmp/$(uuidgen)"
    TMP_FPATH_2="/tmp/$(uuidgen)"
    echo "$(cat<<EOF
(package-list-packages)
(write-file "$TMP_FPATH_2" nil)
(remove-window)
EOF
    )" > $TMP_FPATH_1
    DISPLAY=$_DISPLAY emacsclient -c -n                     \
        --display $_DISPLAY                                 \
        --eval '(package-list-packages)'                    \
        --eval '(sit-for 5)'                                \
        --eval '(write-file "$TMP_FPATH_2" nil)'            \
        --eval '(remove-window)'                            \
        > /dev/null 2>&1

    cat $TMP_FPATH_2
    rm $TMP_FPATH_1 $TMP_FPATH_2

    vnc_clean $_DISPLAY_NUM > /dev/null 2>&1
    }
e-emacs_package_buffer_to_df(){
    current_pkgs=$(_emacs_print_packages)
    python2.7 "$(
cat<<EOF
    # for it in df[df.status=='installed'].name.tolist():
    #    !echo $it >> /Volumes/ub2/home/ub2/admin_emacs_pkgs
    with open('$PKG_LIST_FPATH') as f:
        a = f.read().split('\n')
    res = []
    for l in a:
        _all=len(l)
        _name=l[2:20].strip(' ')
        _version=l[21:34].strip(' ')
        _status=l[35:45].strip(' ')
        _src=l[46:56].strip(' ')
        _desc=l[57:].strip(' ')
        _dict={'name':_name
            ,'version':_version
            ,'status':_status
            ,'src':_src
            ,'description':_desc
            }
        res.append(_dict)
    import pandas as pd
    df = pd.DataFrame(res)
    df
EOF
    )"
    }


export ORG="$HOME_ENV/.emacs.d/private/org"

# export ALTERNATE_EDITOR="leafpad"
export EDITOR="$EMACSCLIENT -t"                             # $EDITOR should open in terminal
export VISUAL="$EMACSCLIENT -c -a emacs25"                  # $VISUAL opens in GUI with non-daemon as alternate

alias ec-window="$EMACSCLIENT -c -n"
alias ec-root-window="$EMACSCLIENT -c -n"
alias ec-term="$EMACSCLIENT -t"                             # used to be "emacs -nw"
alias ec-root-term="sudo $EMACSCLIENT -t"                   # used to be "sudo emacs -nw"

alias ec-test="$EMACSCLIENT -c -a emacs"                  # new - opens the GUI with alternate non-daemon


# e-ec-window(){
#     export EMACSCLIENTx11="$(_ec_client x11)";
#     $EMACSCLIENT -c -n "$@" -s $(e-get-x11-socket);
#     }
# e-ec-root-window(){
#     export EMACSCLIENTx11="$(_ec_client x11)";
#     $EMACSCLIENT -c -n "$@" -s $(e-get-x11-socket);
#     }
# e-ec-term(){                                                # used to be "emacs -nw"
#     export EMACSCLIENTx11="$(_ec_client x11)";
#     $EMACSCLIENT -t "$@" -s $(e-get-x11-socket);
#     }
# e-ec-root-term(){                                           # used to be "sudo emacs -nw"
#     export EMACSCLIENTx11="$(_ec_client x11)";
#     sudo $EMACSCLIENT -t "$@" -s $(e-get-x11-socket);
#     }

# e-ec-test(){                                                # new - opens the GUI with alternate non-daemon
#     export EMACSCLIENTx11="$(_ec_client x11)";
#     $EMACSCLIENT -c -a emacs25 "$@" -s $(e-get-x11-socket);
#     }



alias semacs="sudo emacs25 -Q -nw"

alias vnc-clean='vnc_clean'
alias vnc-reset='vnc_reset'
