#!env zsh

droid-info(){
    _android_info="$(ssh root@localhost -p 9102 'cat /proc/cmdline|sed "s/ /\n/g"|sort')"
    _android_serial=$(echo "$_android_info" | grep serialno | cut -d '=' -f2)
    [[ $_android_serial = 5VT5T16219000835 ]]               \
        && MACHINE_DISPLAY_NAME=5T21
    [[ $_android_serial = 5VT7N16909000324 ]]               \
        && MACHINE_DISPLAY_NAME=7N90
    _android_wifi_mac=$(echo "$_android_info" | grep wifimacaddr | cut -d '=' -f2)
    _android_bt_mac=$(echo "$_android_info" | grep btmacaddr | cut -d '=' -f2)
    echo ""
    printf "serial:\t\t%s\n" $_android_serial
    printf "wifi_mac:\t%s\n" $_android_wifi_mac
    printf "bt_mac:\t\t%s\n" $_android_bt_mac
    echo ""
    }

#
# ### REGISTER
#
# NAME=localhost
# ID=$(whoami)
# PUBLIC_IP=localhost
# LOCAL_IP=127.0.0.1    # $(sudo ifconfig eth0 |grep "inet addr" |awk '{print $2}' |awk -F: '{print $2}')
# curl "http://autoremotejoaomgcd.appspot.com/registerpc?key=$(gn-ar-key)&name=$NAME&id=$ID&type=linux&publicip=$PUBLIC_IP&localip=$LOCAL_IP"
#
# ###

ar-register(){
    echo "usage: ar-register KEY NAME ID TYPE=linux PUBLIC_IP LOCAL_IP"
    curl "http://autoremotejoaomgcd.appspot.com/registerpc?     \
                        key=YOUR_KEY                            \
                        name=NAME_TO_APPEAR_ON_YOUR_PHONE       \
                        id=ANY_UNIQUE_ID                        \
                        type=linux                              \
                        publicip=YOUR_PUBLIC_IP_OR_HOST_NAME    \
                        localip=                                \
                            $(sudo ifconfig eth0 |grep "inet addr" |awk '{print $2}' |awk -F: '{print $2}')"
    curl "http://autoremotejoaomgcd.appspot.com/registerpc?     \
                        key=$(ngn-ar-key)                            \
                        name="mbp2"       \
                        id=ANY_UNIQUE_ID                        \
                        type=linux                              \
                        publicip=YOUR_PUBLIC_IP_OR_HOST_NAME    \
                        localip=                                \
                            $(sudo ifconfig eth0 |grep "inet addr" |awk '{print $2}' |awk -F: '{print $2}')"
    }

ngn-ar-msg() { curl "http://autoremotejoaomgcd.appspot.com/sendmessage?key=$(ngn-ar-key)&message=source;command=:=$USER;$1;"; }
gn-ar-msg() { curl "http://autoremotejoaomgcd.appspot.com/sendmessage?key=$(gn-ar-key)&message=source;command=:=$USER;$1;"; }
gn-backup() { \
    sn4_ar_msg ssh_droid_start > /dev/null 2>&1;
    RES=$($HOME_ENV/.scripts/ENV/bin/celery --workdir=$HOME_ENV/.scripts/worker --app=sys_serv \
    call --queue=sys_serv_tasks sys_serv_tasks.sn4_backup --args='[]' \
    --countdown=20 | xargs -I '{}' printf 'sn4_backup [%s %s] expecting git task ID -- %s\n' $(date +%Y-%m-%d\ %H:%M:%S) {});
    echo $RES >> /var/sockets/supervisor_relay.log;
    echo 'OK';
    }
gn-ssh-remote() { \
    if [[ -n "(adb devices|grep 5VT5T16219000835)" ]]; then
        adb shell
    else
        assign () { eval "$1=\$(cat; echo .); $1=\${$1%.}"; };
        assign SCRIPT < <(cat <<'EOF'
sshd_svc() { curl -s "$URL_BASE;openSSH_$1;" > /dev/null 2>&1; }
check_gnr_tunnel() { sudo /usr/local/bin/ports_listen|grep sshd|grep 19102|wc -l; }
AR_KEY="APA91bGo63VaMmbthWvp12By5s81H01e2nBdK6Xz4dZJSyjoDY-TDsELImTbZykAC0CUSiBsjsu0BoVzu389iIS-608AdBOiKnAOtaNXsjPONEeM6-Sdrz4lwfT90UVuCNtoFmWOIEQQ";
URL_BASE="http://autoremotejoaomgcd.appspot.com/sendmessage?key="$AR_KEY"&message=source;command=:=ub2";
seconds_wait_after_sshd_start=3;
seconds_wait_before_sshd_restart=15;
restart_time=0;
connected=false;
cnt=0;
while true; do;
    [[ $(check_gnr_tunnel) -gt 0 ]] && break;
    [[ $restart_time = 0 ]] && restart_time=$(date --date=$seconds_wait_before_sshd_restart' seconds' +%s);
    [[ $cnt -ge 10 ]] && break;
    sshd_svc start;
    sleep $seconds_wait_after_sshd_start;
    [[ ! $(check_gnr_tunnel) -gt 0 ]] && [[ $(date +%s) -ge $restart_time ]] && sshd_svc stop;
    let cnt=cnt+1;
done;
EOF
        );
        ssh ub2 zsh -c "$SCRIPT" && ssh gnu;
    fi;}

alias ngn-ar-key='echo "APA91bHL0Lshroozr4eoHXSgSxGjz4tTiYsNqfM5-RNNYL5lfgG8boO6HL4M1TkBI9HqbnH03M8CyRo4Eiia6H-DvD5A6LpeIBjFEmVlxm-GXmR2zptJ5O9cvw8TJE4Vy9Pu8mJX_7nw"'
alias gn-ar-key='echo "APA91bGo63VaMmbthWvp12By5s81H01e2nBdK6Xz4dZJSyjoDY-TDsELImTbZykAC0CUSiBsjsu0BoVzu389iIS-608AdBOiKnAOtaNXsjPONEeM6-Sdrz4lwfT90UVuCNtoFmWOIEQQ"'
alias gn-copy_screen_png_here='adb shell screencap -p /sdcard/screen.png && adb pull /sdcard/screen.png && adb shell rm /sdcard/screen.png'
# alias gn-sshdroid-start='gn-ar-msg "SSHDroid_start"'
# alias gn-sshdroid-stop='gn-ar-msg "SSHDroid_stop"'
alias gn-ssh-start='gn-ar-msg "openSSH_start"'
alias gn-ssh-stop='gn-ar-msg "openSSH_stop"'
alias gn-teamviewer-start='gn-ar-msg "TeamViewer_start"; /Applications/TeamViewer.app/Contents/MacOS/TeamViewer &'
alias gn-teamviewer-stop='gn-ar-msg "TeamViewer_stop"; kill_by TeamViewer.app'

