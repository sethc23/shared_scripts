#!/bin/sh

#set -xv




# without checking out dev, force master branch to sync with dev (current) branch ...


# git clone --recursive git@github.com:opsengine/cpulimit.git --origin github



#  --  REPOS (g-rp*)
alias g-rp-clean='git clean -dfx'
alias g-rp-clone='git clone --recursive'
alias g-rp-name='basename `git rev-parse --show-toplevel`'
alias g-rp-pull='git pull --recurse-submodules'
alias g-rp-push='git push'
alias g-rp-fork-list-all='git hub forks'

g-rp-init_w_descr() { \
    "USAGE: g-rp-init_w_descr '<DESCRIPTION>' '<PUB-SRC>'"
    "   PUB-SRC: [ lab | hub | gitlab | git-lab | github | git-hub ] (default: git-lab)"

    repo-descr="$1"

    pub-dest="lab"
    [[ -n $2 ]] && pub-dest=$2
    pub-dest=$(echo "$pub-dest"|sed -r 's/^(git[-]?)(.*)$/\2/')

    # # NOTE: [ --private | --internal ]
    # # NOTE: print "gitlab master branch protected by default (i.e., force push will fail)"
    # cat $HOME_ENV/.gitconfig > ./.git/config
    # e-e-client-window ./.git/config
    # git-lab create --private --description="config for org life"
    # git remote rename origin gitlab
    # git push -u gitlab master


    git init
    rm .git/config
    cat $HOME_ENV/.gitconfig > ./.git/config
    emacs .git/config

    CMD=$(echo "git-""$pub-dest"" create --description=\"$1\"")
    eval $CMD;

    CMD=$(echo "git remote rename origin git"$pub-dest)
    eval $CMD;

    CMD=$(echo "git push -u git""$pub-dest"" master")
    eval $CMD;

    # #pwd | sed -r 's/.*\/([^\/]+)$/\1/g' | xargs -I '{}' git remote add github git@github.com:sethc23/{}.git;
    # [[ -n "echo $(git remote show) | grep origin" ]] && git remote remove origin;
    # git push github dev; git branch --set-upstream-to=github/dev;
    # git checkout -b master; git push github master; git branch --set-upstream-to=github/master;
    # git checkout -b dev;


    git branch -avv; \
    }


#  --  STATUSES (g-s*)
alias g-s='git status'
# alias g-sp='git status --porcelain'
alias g-sp='printf "%s" "$(git diff --relative --ignore-submodules --name-status)"'
alias g-s_CLEAN='sed -r  "s/^[ ]?([A-Z]|[?]{2})\s*//"'
alias g-sp_CLEAN='g-s_CLEAN'

#  --  -- re: all files
alias g-sp-ADD='g-sp|env grep -E \^"\s*A\s*"'
alias g-sp-MOD='g-sp|env grep -E \^"\s*M\s*"'
alias g-sp-DEL='g-sp|env grep -E \^"\s*D\s*"'
alias g-sp-UNTRACKED='g-sp|env grep "^[?][?] "'
# alias g-s-UNTRACKED='git status --porcelain | env grep "^[?][?] " | grep -E "\?\?" | awk '\''{print }'\'' | tr '\''??'\'' '\'' '\'''

#  --  -- re: stage and RELATIVE tracked files IGNORING submodules
alias g-s-STAGED='printf "%s" "$(git diff --relative --ignore-submodules --name-status --cached)"'
alias g-s--STAGED='printf "%s" "$(git diff --relative --ignore-submodules --name-status)"'
alias g-s--STAGED-MOD='printf "%s" "$(git diff --relative --ignore-submodules --name-status)"|env grep -E \^"M\s+"'
alias g-s--STAGED-DEL='printf "%s" "$(git diff --relative --ignore-submodules --name-status)"|env grep -E \^"D\s+"'
alias g-s--TRACKED='git status --porcelain|env grep "^[?][?] "'

# alias g-s-UNSTAGED-TRACKED='git ls-files -m'
# alias g-s-UNSTAGED-ALL='git diff --stat --name-only'
# alias g-s-p-STAGED='git diff --name-status --cached'
# alias g-s-p-UNSTAGED='git diff --name-status|env grep -v "[?][?]"'
# alias g-s-NOT_STAGED="git diff --name-only | more"



alias g-s-NOT_STAGED-MOD="git diff --name-status | more | grep \^M | sed -r 's/^M\s*//g'"
g-s-DIFF-ADDED_MODDED() { git diff $1 --name-status | grep -v ^D | sed -r 's/^[A-Z?]\s*//';}
g-s-DIFF-REMOVED() { git diff $1 --name-status | grep ^D | sed -r 's/^M\s*//g';}

#  --  BRANCHES (g-b*)
alias g-b='git branch -avv'
alias g-b-DELETE='git branch -d'
alias g-b-r-DELETE-LOCAL='git branch --remotes --delete'
g-b-r-DELETE-REMOTE() {
    if [[ (-z $1) && (-z $2) ]]; then
        echo "\n\tUsage:\t g-b-r-DELETE-REMOTE <remote name> <branch name>\n"
        return
    elif [[ (-n $1) && (-z $2) && (-n $(echo "$2"|cut -d "/" -f1-2)) ]]; then
        _repo=$(echo "$2"|cut -d "/" -f1)
        _branch=$(echo "$2"|cut -d "/" -f2)
    else
        _repo=$1
        _branch=$2
    fi
    git push $_repo --delete $_branch
    }
alias g-b-name='git rev-parse --abbrev-ref HEAD'
g_b_sync(){ \
    if [[ "$1" = "push" ]]; then
        git push -f . $(g-b-name):$1;
        REMOTE_NAME=$(git rev-parse --abbrev-ref --symbolic-full-name @{upstream} | cut -d / -f1);
        git push $REMOTE_NAME $1;
    elif [[ "$1" = "fetch" ]]; then
        git fetch $2 $3:$3
    fi; \
    }
alias g-b-push-other='g_b_sync push'
alias g-b-fetch-other='g_b_sync fetch $1 $2'
alias g-b-clean='git clean -dfx'
g-b-tag-checkout(){
    _tag=$1
    [[ -n $2 ]]                         \
        && _branch_name=$2              \
        || _branch_name="v_$_tag"
    git checkout tags/$_tag -b $_branch_name
    }

#  --  DEV BRANCH (g-D*):
g_push_dev_and_master() { \
    g_add_commit_push; \
    dev_branch=$(g-b-name); \
    git checkout master; \
    #git merge --stat --no-edit -X theirs \
    #    $(git branch -v | sed -r 's/(\*|\s) //' | \
    #        grep ^dev | sed -r 's/^(dev\s*)([A-Za-z0-9]+)\s(.*)$/\2/'); \
    git merge `git log --pretty=format:'%h' -n 1` $dev_branch; \
    git push; \
    git checkout dev;\
    git branch -avv; }
alias g-DX='g_push_dev_and_master'

#  --  COMMITS (g-c*)
alias g-c='git commit -m'
g-c-EMAIL() { git show -s --format=%ce $1 | head -n 1; }
g-c-DATE() { git show -s --format=%ai $1 | head -n 1; }
g-c-DATE_EPOCH() { git show -s --format=%at $1 | head -n 1; }
alias g-c-latest='git log --abbrev-commit --pretty=oneline --max-count=1| cut -d \  -f 1'
g-c-between(){ git log $1..$2 --pretty=oneline | wc -l;}

#  --  DIFFS (g-d*)
g-d-names() { git diff $1 $2 --name-only | more; }
g-d-added() {   if [[ -n "$2" ]]; then
                    git diff $1 $2 --name-status | grep '^A' | sed -r 's/^A\s+//g'
                else
                    git diff HEAD $1 --name-status | grep '^A' | sed -r 's/^A\s+//g'
                fi; }
# g-d-added-checkout() {   git checkout ec22396 -- $(g-d-added ec22396) }
g-d-deleted() { git diff $1 $2 --name-status | grep '^D' | sed -r 's/^D\s+//g'; }
# g-d-deleted-remove() { git rm -- $(g-d-deleted $@) }
g-d-deleted-remove() { git diff $1 $2 --name-status | grep '^D' | sed -r 's/^D\s+//g'; }
g-d-modified() { git diff $1 $2 --name-status | grep '^M' | sed -r 's/^M\s+//g'; }


g-m() { git merge -s recursive -X ours -m "$1"; }

#  --  TAGS (g-t*)
alias g-t-last='git describe --abbrev=0 --tags'
f-g-t-checkout(){
	[[ -z $1 ]] 										\
		&& _tag="$(git describe --abbrev=0 --tags)" 	\
		|| _tag=$1

	[[ -z $_tag ]] 										\
		&& echo "Error: No tag found" 					\
		&& return

	[[ -z $2 ]] 															\
		&& _branch="$(python -c "x='$_tag'; print(x.strip(' v'));" )" 		\
		|| _branch=$2

	[[ -z $_branch ]] 														\
		&& echo "Error: No branch found or identified" 						\
		&& return

	[[ $_tag = $_branch ]] 														\
		&& _branch=$(printf "v%s" "$_branch")
		# && echo "Error: Branch \"$_branch\" should not be identical to Tag \"$_tag\"" 						\
		# && return

	eval "git checkout tags/$_tag -b $_branch"
	}
alias g-t-checkout='f-g-t-checkout'

#  --  FILES (g-f*)
alias g-f-latest='git diff-tree --no-commit-id --name-only -r $(g-c-latest)'
alias g-f-MODIFIED="g-s-p | grep '^ M ' | awk '{print $2}'"

#  --  REMOVE (g-rm*)
alias g-rm-c="g-s-p | grep '^ D ' | sed 's/^\sD\s//' | xargs git rm --cached --ignore-unmatch -r -f --"
alias g-rm="g-s-p | grep '^ D ' | sed 's/^\sD\s//' | xargs git rm --ignore-unmatch -r -f --"
alias g-rm-REMAINING_UNSTAGED_ALL='git diff --stat --name-only | xargs git rm --cached --ignore-unmatch -f -r --'
alias g-rm-REMAINING_UNSTAGED_DELETED="git status --porcelain | grep '^ D ' | sed 's/ [A-Z] //g' | xargs -I '{}' git rm -q --cached --ignore-unmatch -f -r -- {} > /dev/null 2>&1"
alias g-rm-IGNORED='cat .gitignore | xargs git rm --cached -r --ignore-unmatch -q --'
alias g-rm-UNSTAGED-UNTRACK="g-not_staged | awk '{print $2}' | xargs git update-index --remove --ignore-missing --force-remove --assume-unchanged --skip-worktree --again -q --"

#  --  INDEX (g-i*)
alias g-i='git update-index --assume-unchanged --'
alias g-i-UNTRACKED='git ls-files -o --exclude-standard | xargs git ignore'
alias g-i-FOLDER='git ls-files -z | xargs -0 git update-index --assume-unchanged'
alias g-i-LIST='git ls-files -v | grep "^[[:lower:]]"'



alias g-a='g-rm-REMAINING_UNSTAGED_DELETED && git add --ignore-removal -- .'
alias g-ch-n='git checkout -b'
alias g-l='git log --graph --decorate --pretty=oneline --abbrev-commit --all'
alias g-reset-FLAGS="git ls-files -o | sed -r \"s/'/\\\'/\" | grep -v /$ | xargs -I '{}' printf '\"%s\"\n' {} | xargs -I '{}' git add --ignore-removal -- {}"
alias g-reset-ALL_FLAGS='for i in 1 2 3 4 5 6; do find ./SERVER$i/. -type f -name "*" -print0 | xargs -0 git add -f --; done'
alias g-SPARSE_UPDATE='git read-tree -mu HEAD'
alias g-RESTORE_LOCAL='g-restore_local_f'
alias g-UNTRACK='git update-index --remove --ignore-missing --force-remove --assume-unchanged -q --'

#  --  SPECIAL (g-X*):
g_commit_push() {\
    git commit -m "$1"
    sleep 1
    git push
    git status;}
g_add_commit_push() { \
    git add --ignore-removal -- .
    if [ $(git diff --stat --name-only | wc -l) -gt 0 ]; then
        git diff --stat --name-only | xargs -I '{}' git rm --cached --ignore-unmatch -f -r -- {}
        #git status --porcelain | grep "^ D " | sed "s/ [A-Z] //g" | xargs git rm --cached --ignore-unmatch -f -r --
    fi
    g_commit_push "$@";
    }
alias g-X_='g_commit_push'
alias g-X='g_add_commit_push'


#  --  SUBMODULES (gs-*):
gs_add_from_gitmodules(){
cmd=$(cat <<EOF
from subprocess import Popen as sub_popen
from subprocess import PIPE as sub_PIPE

def run_cmd(cmd):
    p = sub_popen(cmd,stdout=sub_PIPE,shell=True,executable='/bin/zsh')
    (_out,_err) = p.communicate()
    assert _err is None
    return _out.strip('\n\r')

import os,re
base_dir = os.getcwd()
with open(base_dir + '/.gitmodules','r') as f:
    x = f.readlines()
submods = {}
for i in range(len(x)):
    it = x[i].strip('\n\t ')
    if it.count('[submodule'):
        mod = re.match('.*"([^"]+)".*',it).groups()[0]
        params,pt = {},0
        while True:
            try:
                pt += 1
                p = x[i+pt]
                if p.count('[submodule'):
                    break
                else:
                    p = p.strip('\n\t ')
                    k,v = p.split('=')
                    k,v = k.strip(),v.strip()
                    params[k]=v
            except:
                break
        submods[mod]=params
for k,v in submods.iteritems():
    run_cmd('git submodule add -f %(url)s ./%(path)s' % v)
EOF
)
    python -c $cmd;
    }
gs_recursive_pull() { \
    git submodule foreach "(\
        git submodule init; \
        git submodule update; \
        git pull; \
        )&";



    # git config --list|env egrep \^submodule
    # git submodule foreach --recursive git submodule init;
    # git submodule foreach --recursive git submodule update;

    # git branch --remotes --list --contains 6a1b854 | sed 's/^ *//'

    # git submodule foreach --recursive git pull origin master;
    # git submodule foreach --recursive git checkout master master;

    }
alias g-sub-init_all='gs_recursive_pull'
alias g-sub-status='git submodule foreach --recursive git branch -avv'
alias g-sub-update='git pull && git submodule init && git submodule update && git submodule status'
alias g-sub-list='git config --list|env egrep \^submodule'
alias g-sub-init_by_gitmodules='gs_add_from_gitmodules'

# HERE=$(pwd);for i in $(env ls -1 ./); do cd $i; REMOTE=$(git remote -v|columns|cut -d ' ' -f2); cd ..; git submodule add "$REMOTE" ./$i; cd $HERE; done

# new submodule example
# git submodule add --name seamless_yelp_scraping -- git@github.com:sethc23/seamless_yelp_scrapi
# git submodule add -b custom --name PastebinPython -f -- git@github.com:sethc23/PastebinPython.
# git submodule add -- git@github.com:sethc23/aporo aporo



#  --  BLOG (g-B*)
alias g-blog-serve='cd $BD/sethc23.github.io && rm -fr _site && bundle install && bundle exec jekyll serve --drafts --incremental'

# Exemplar Gist
# -- Update Gist
# sed -n '6354,6848p' f_postgres.py | sed -r 's/^            //g' | gist -u d2ea443dee86c22d201f -f turnstile_funct.py -
# -- New Gist
# sed -n '1348,1457p' f_postgres.py | sed -r 's/^            //g' | gist -f turnstile_funct.py -d "f(x) z_get_string_dist" -


# rebasing technique
# git rebase -i -p {first commit with err}
# git commit --amend --author "sethc23 <sethc23@users.noreply.github.com>" --no-edit && git reba