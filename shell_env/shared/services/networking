#!/bin/zsh

function get_my_ip_int_f() { \
    if [ `uname` = 'Darwin' ]; then
        _test=`ipconfig getifaddr en0`
        if [ -z $_test ]; then
            _test=`ipconfig getifaddr en1`
            if [ -z $_test ]; then
                echo 'No ethernet or wireless internal IP.'
            else
                echo $_test
            fi
        else
            echo $_test
        fi
    else
        ip route get 8.8.8.8 | awk '{print $NF; exit}'
    fi;}
function get_my_ip_ext_f() { \
    curl -s 'http://ipv4.nsupdate.info/myip' | \
    sed -r 's/^([0-9]{,3}\.[0-9]{,3}\.[0-9]{,3}\.[0-9]{,3})/\1/g' | \
    xargs -I '{}' printf '%s\n' {}; }
alias get_my_ip_int='get_my_ip_int_f'
alias get_my_ip_ext='get_my_ip_ext_f'

alias ipt='sudo iptables -nL -v'
alias ipt_flush='sudo iptables -F'
alias ipt_nat='sudo iptables -t nat -nL -v'
alias ipt_nat_flush='sudo iptables -t nat -F'
alias ipt_proxy='sudo iptables -t nat -I OUTPUT 1 -o eth0 -m owner \! --gid-owner 1003 -p tcp --match multiport --dports 80,443 -j REDIRECT --to-port 10052'
alias ipt_proxy_2='sudo iptables -t nat -I PREROUTING 1 -o eth0 -m owner \! --gid-owner 1003 -p tcp --match multiport --dports 80,443 -j REDIRECT --to-port 10052'


alias ports_listen='sudo lsof -n -i -P | grep LISTEN'
alias ports_listen_2='sudo netstat -ltnp'
alias ports_listen_3='nettop'
alias ports_sockets='netstat -lx'
alias ports_ssh='lsof -i tcp | grep ^ssh'

function net_dig_simple_f() { dig $1 +nostats +nocomments +nocmd; }
alias net_dig_simple='net_dig_simple_f'

function net_port_check_f(){
    nmap -p $1 $2
}
alias net_port_check='net_port_check_f'
alias net_port_check_help='echo "alias net_port_check <port> <ip/url>"'
alias net_route_v4='route -A inet'
alias net_route_v6='route -A inet6'

#arp -- address resolution protocol

# <<<   ---   DISTRIBUTED NETWORK (dn_*)   ---   >>>
alias dn_remote_tunnel_open="echo \"$(cat /etc/ssh/sshd_config | grep \^Port | cut -d \  -f2)\" | xargs -I '{}' ssh -nNR 1{}:localhost:{} ub2  > /dev/null 2>&1 &"
alias dn_remote_tunnel_close="echo '$(cat /etc/ssh/sshd_config | grep \^Port | cut -d \  -f2)' | xargs -I '{}' kill -9 `ps -awx | grep 1{} | grep -v grep | cut -d \  -f1` > /dev/null 2>&1"
dn_update_ip(){ \
    URL="http://info.sanspaper.com/sys/servers/s_idx/$SERVER_ID";

    # JSON_1=$(printf '{"s_user":"%s","s_host":"%s"}' "$USER" "$(hostname)");\
    JSON_1=$(printf '{"s_host":"%s"}' "$(hostname)");\
    JSON_2=$(printf '{"home_env":"%s"}' "$HOME_ENV" );\
    JSON_3=$(printf '{"local_port":"%s"}' "$(cat $HOME_ENV/.shell_local | grep local_port | cut -d = -f2)");\
    JSON_4=$(printf '{"local_ip":"%s","ext_ip":"%s"}' "$(get_my_ip_int_f)" "$(get_my_ip_ext_f)");\
    JSON_5=$(printf '{"git_sync":%s}' "$(cat $HOME_ENV/.shell_local | grep git_sync | cut -d = -f2)")
    JSONS=($JSON_1 $JSON_2 $JSON_3 $JSON_4 $JSON_5)
    a='{}'; for i in $JSONS; do a=$(jq -M -n "$a * $i"); done
    
    curl -s -H "Content-Type: application/json" --url $URL -X POST -d $a
}
