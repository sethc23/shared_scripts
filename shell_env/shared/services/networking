#!env zsh

# TO ADD/EXPLORE
#   arp             address resolution protocol
#   ndpmon          Neighbor Discovery Protocol Monitor
#   nmap
#   ping6
#   socat
#   traceroute
#   route -tn -N
#   tcpdump -I tun0
#   ocat 26aattdcwf746h3k.onion
#   tcpdump
#       sudo tcpdump --direction=in 'tcp port 80'
#   ip route show
#       ip route show|awk '{print $NF; exit}'

# ocat -i <onion_id>
# ocat -o <IPv6 addr>
# ocat_log(){ printf 'File: %s\n\n' "$HOME/.ocat/connect_log"; cat $HOME/.ocat/connect_log; }
# ocat \
#     -a /tmp/tor_incoming.log
#     -b              # background (default)
#     -B              # foreground
#     -f /etc/tor/torrc
#     -l [ip:]port    # incoming binding (default: 127.0.0.1:8060)
#     -L /tmp/tor.log
#     -t              # SOCKS IP and/or port
#     -U              # bidirectional

# sudo ocat -a /tmp/tor_incoming.log -B -d 7 -f /etc/tor/torrc -L /tmp/tor.log -U 26aattdcwf746h3k.onion

# <<<   ---   General Tools and Shortcuts   ---   >>>
get-my-ip-int() {

    if [[ $(uname -o) = Darwin ]]; then

        _addr=$(ipconfig getifaddr en0)

        [[ -z $_addr ]]                                 \
            && _addr=$(ipconfig getifaddr en1)

    else
        _addr=$(ip route show scope link                \
            | awk '{print $NF; exit}'                   \
            )
    fi

    [[ -z $_addr ]]                                     \
        && echo 'No ethernet or wireless internal IP.'  \
        || echo "$_addr"

    }
get-my-ip-ext() {
    curl -s 'http://ipv4.nsupdate.info/myip' | \
    sed -r 's/^([0-9]{,3}\.[0-9]{,3}\.[0-9]{,3}\.[0-9]{,3})/\1/g' | \
    xargs -I '{}' printf '%s\n' {}; }
get-my-ip-ext-6() {
    _data=$(curl -s 'http://ipv6.nsupdate.info/myip' 2> /dev/null)
    [[ -z $_data ]] && echo 'Unable to obtain IPv6.' && return
    echo $_data \
        | sed -r 's/^([0-9]{,3}\.[0-9]{,3}\.[0-9]{,3}\.[0-9]{,3})/\1/g' \
        | xargs -I '{}' printf '%s\n' {}; }
net-dig-simple() { dig $1 +nostats +nocomments +nocmd; }
net-port-check(){ nmap -p $1 $2; }

# <<<   ---   DISTRIBUTED NETWORK (dn_*)   ---   >>>
dn-remote-tunnel(){
    EXISTS="$(env ps -awx | grep 1$LOCAL_PORT | grep -v grep | wc -l)"
    if [[ "$1" = "open" ]] && [[ $EXISTS = 0 ]]; then
        echo $LOCAL_PORT | xargs -I '{}' ssh -nNR 1{}:localhost:{} ub2  > /dev/null 2>&1 &
    elif [[ "$1" = "close" ]] && [[ $EXISTS = 1 ]]; then
        kill_by 1$LOCAL_PORT > /dev/null 2>&1
    fi
    }
dn-update-ip(){
    SHELL_VARS=("${(@f)$(zsh -ic 'echo "tmp"; echo \"http://info.sanspaper.com/sys/servers/s_idx/$SERVER_ID\"; get_my_ip_int; get_my_ip_ext')}")
    URL="$SHELL_VARS[2]"
    IP_INT="$SHELL_VARS[3]"
    IP_EXT="$SHELL_VARS[4]"

    JSON_1=$(printf '{"s_host":"%s"}' "$(hostname)")
    JSON_2=$(printf '{"home_env":"%s"}' "$HOME_ENV" )
    JSON_3=$(printf '{"local_port":"%s"}' "$LOCAL_PORT")
    JSON_4=$(printf '{"local_ip":"%s","ext_ip":"%s"}' $IP_INT $IP_EXT)
    JSON_5=$(printf '{"git_sync":%s}' "$LOCAL_GIT_SYNC")
    JSON_6=$(printf '{"s_path":"%s"}' "$PATH")
    JSONS=($JSON_1 $JSON_2 $JSON_3 $JSON_4 $JSON_5 $JSON_6)
    a='{}'; for i in $JSONS; do a=$(jq -nMc "$a * $i"); done

    CMD="echo '$a' | curl -g -d @- $URL"
    eval ${CMD}
    }




alias mac-extract="env grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'"
alias mac-random="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'"

if [[ "$OS_NAME" = "Darwin" ]]; then
    alias mac-eth-orig="networksetup -getmacaddress Ethernet | env grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'"
    alias mac-eth-curr-get='ifconfig en0 | grep ether | sed "s/ *\t*ether //"'
    alias mac-eth-curr-set='sudo ifconfig en0 ether'
elif [[ "$OS_NAME" = "Linux" ]]; then
    alias mac-eth-orig="cat /sys/class/net/eth0/address"
    alias mac-eth-curr-get='ifconfig eth0 | grep ether | sed "s/ *\t*ether //" | env grep -o -E "([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}"'
    alias mac-eth-curr-set='sudo ip link set dev eth0 address'
fi

alias net-port-check-help='echo "net_port_check <port> <ip/url>"'
alias net-route-4='route -A inet'
alias net-route-6='route -A inet6'
# alias ports_listen='sudo lsof -n -i -P | grep LISTEN'
# alias ports-listen='sudo lsof -nRP -w -iTCP -sTCP:LISTEN|grep -v "UNKNOWN"'
alias ports-listen='$HOME_ENV/.scripts/toolbox/ports_listen'
alias ports-listen-2='sudo netstat -ltnp'
alias ports-listen-3='nettop'
alias ports-sockets='netstat -lx'
alias ports-ssh='lsof -i tcp | grep ^ssh'

