#!env zsh

[[ -n $DEBUG_SHELL ]] && echo "_shared_START"

[[ -n $DEBUG_SHELL ]] && echo "_shared_fx"

assign() {  eval "$1=\$(cat; echo .); $1=\${$1%.}";}
build_script_env() {
    FILE="$HOME_ENV/.scripts/script_env";
    env | sort | sed -r 's/^([^=]+)=(.*)$/\1="\2"/g' > $FILE;
    alias | sed -r 's/^(.*)$/alias \1/g' >> $FILE;
    }
ccat() {
    while read -r line
    do
        echo "$line"
    done <$1
    }
qcat() {
    while read -r line
    do
        [[ $(echo $line|grep '"') ]]    \
            && line=$(echo $line|sed -r 's/"/\\"/g')
        echo '"'"$line"'"'
    done <$1
    }
alias lcat='ccat'
cde_f() {
    if [[ -z $1 ]]; then
        if [[ -z `env ls | env grep ENV` ]]; then
            echo "No virtualenv ENV"
        else
            source ENV/bin/activate
        fi
    else
        if [[ -z `env ls $1 | env grep ENV` ]]; then
            echo "No virtualenv ENV"
        else
            cd $1
            source ENV/bin/activate
        fi
    fi
    }
copy_back_aliases() { cp -R $HOME_ENV/.alias_shared $HOME_ENV/.scripts/.alias_shared; }
curl-JSON() { curl -H 'Accept: application/json; indent=4' $1; }
d-image-dir(){
    SRC_DIR=$1
    DEFAULT_SAVE_FPATH="/tmp/d-image.img"
    DIR_SIZE=$(du -sh $SRC_DIR|cut -f1)
    if [[ -z $(echo $DIR_SIZE|grep 'M') ]]; then
        error_msg="missing 'M' designation and this fx not configured to handle other designations"
        echo $error_msg
        return
    fi
    DIR_SIZE=$(echo $DIR_SIZE|sed 's/M$//')
    IMG_SIZE=$(python -c "print int(round(($DIR_SIZE*0.15)+$DIR_SIZE,0))")
    [[ -n $2 ]] && DEFAULT_SAVE_FPATH=$2
    echo "Creating empty, fitted img ($DEFAULT_SAVE_FPATH)"
    dd if=/dev/zero of=$DEFAULT_SAVE_FPATH bs=1M count=$IMG_SIZE
    mkfs.ext4 $DEFAULT_SAVE_FPATH
    MNT_PATH=/mnt/$(uuidgen)
    sudo mkdir -p $MNT_PATH
    sudo mount -t ext4 -o loop $DEFAULT_SAVE_FPATH $MNT_PATH
    sudo cp -ar $SRC_DIR $MNT_PATH/
    sudo umount $MNT_PATH
    }
d-image-remote-from(){
    SSH_CONFIG=$1
    IMG_SRC=$2
    IMG_DEST=$3
    [[ -z "$(echo $IMG_DEST|grep -E '\.gz$')" ]] && IMG_DEST=$IMG_DEST".gz"
    ssh $SSH_CONFIG "dd if=$IMG_SRC | gzip -1 -" | dd of=$IMG_DEST
    }
diff-dir-all() { env colordiff --brief --recursive --width=$(tput cols) $1 $2; }
diff-dir-left() { diff-dir-all | grep "Only in $(echo $1 | sed 's/[^/]*$//')"; }
diff-dir-right() { diff-dir-all | grep "Only in $(echo $2 | sed 's/[^/]*$//')"; }
diff-dir-right-copy-left() {
    here=$(echo $(pwd))
    f=$(diff-dir-right $1 $2 | awk '{print $3$4}' | sed 's/:/\//g' | sed 's/\/\//\//g');
    repl_part=$(echo $2 | sed 's/\//\\\//g');
    for from_file in $f
        do
            to_file=$(echo $1$from_file | sed "s/$repl_part//g")
            cmd=$(echo "cp -R "$here/$from_file $to_file)
            #cmd=$(echo $here/$from_file $to_file)

            sh -c "$cmd"

            # | xargs cp -R
            #cp -R $(echo $from_file $to_file)
        done;
    unset here f repl_part to_file;}
diff-dir-files() { diff-dir-all | grep -E '^Files'; }
diff-dir-same() { env colordiff --brief --recursive --report-identical-files $1 $2 | grep 'are identical'; }
diff-files() { env colordiff --side-by-side --suppress-common-lines --ignore-all-space \
    --ignore-blank-lines --ignore-space-change --ignore-blank-lines --width=$(tput cols) $1 $2; \
    }
diff-files-left() { env colordiff --side-by-side --suppress-common-lines --ignore-all-space \
    --ignore-blank-lines --ignore-space-change --ignore-blank-lines --width=$(tput cols) $1 $2 | \
    awk 'NR==1{print} NR>1 && /[^a-zA-Z0-9]<[^a-zA-Z0-9]/ {print}'; \
    }
diff-files-right() { env colordiff --side-by-side --suppress-common-lines --ignore-all-space \
    --ignore-blank-lines --ignore-space-change --ignore-blank-lines --width=$(tput cols) $1 $2 | \
    awk 'NR==1{print} NR>1 && /[^a-zA-Z0-9]>[^a-zA-Z0-9]/ {print}'; \
    }
djJSON() { curl-JSON http://0.0.0.0/api_view/$1/?format=json; }
dl_unzip() { wget $1; tar -xzvf $1; }
edit_bash_prof() { $EDITOR "$HOME_ENV/$SHELL_CONFIG"; source_bash; }
edit_bash_share() { $EDITOR $HOME_ENV/.scripts/.alias_shared; source_bash; }
edit_linux_share() { $EDITOR $HOME_ENV/.scripts/.alias_linux; source_bash; }
edit_this_bash() { $EDITOR $SERV_HOME/$ALIAS; source_bash; }
find-dirs() { sudo find -L "$1" -mindepth 1 -type d -iregex "$2"; }
find-file() { sudo find -L "$1" -mindepth 1-type f -iregex "$2"; }
# find-files-quoted() { sudo find -L "$1" -mindepth 1 -type f -exec ls -Q + ; }
find-files-quoted() {
    # sudo find -L "$1" -mindepth 1 -type f -exec ls -Q + ;
    sudo env find -L $@ | xargs -I '{}' printf "'%s'\n" {} ;
    }
find-dirs-quoted() { sudo find -L "$1" -mindepth 1 -type d -exec 'ls -Q {}' \; ;}
find-files-exec() { sudo find -L "$1" -mindepth 1 -type f -exec sh -c "echo -n {}; echo -n ' x '; echo {}" \; ; }
#find-files-grep(){ sudo find -L "$1" -mindepth 1 -type f \
    #-exec sh -lc "env -i grep -i --color=always -R -e \"$2\" -n -H -T {}" \;
    # -exec sh -lc "printf \"<>FILE<> %s\n\" {}; env grep -i -R -e \"$2\" -n -H -T {}" \;
    # -exec sh -lc "printf \"\n<>FILE<> %s\n\n\" {}; cat -n --squeeze-blank $(pwd)/{} | grep" \;
    #}
find-files-grep() { sudo find -L "$1" -mindepth 1 -type f | xargs grep -iE "$2" 2> /dev/null; }
find-time-min-updated-ago() { sudo find -L "$1" -mindepth 1 -mmin -"$2"; }
find-date-newer() { sudo find -L "$1" -mindepth 1 -newermt "2016-03-27 18:30" \! -newermt "2016-03-27 18:45"; }
### Print with quotes
###    find ./ -mindepth 1 -maxdepth 1 -type d -exec ls -Q +
gdiff() { git diff $@ | cdiff -s -w 110; }
jq-merge() { jq -sRcj ' [ splits("\n")? | split(":") as $i | { ($i[0]?) : ( $i[1] | sub("^(\\s)+"; ""; "x") ) } ]' | jq -cj 'add'; }
ls-mounts() { printf 'SOURCE:\t\t\t\tMOUNT POINT:\n'; df -h | tail -n +2 | sed -r 's/\s+/ /g' | cut -d ' ' -f1,6|awk '{ printf("%-31s %s\n", $1, $2); }'; }
man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
            man "$@"
    }
newalias_here() { echo "alias "$1 >> $SERV_HOME/$ALIAS; source_bash; }
newalias_linux() { echo "alias "$1 >> $HOME_ENV/.scripts/.alias_linux; pull_shared_scripts; source_bash; }
newalias_shared() { echo "alias "$1 >> $HOME_ENV/.scripts/.alias_shared; pull_shared_scripts; source_bash; }
# pyprofileread() { eval("python -m line_profiler \$1.lprof;"); }
pyprofilewrite() { kernprof.py -l $1; }
RD() { cd $BD/RD/src; python seamless.py; }
RDt() { cd $BD/RD/src; python seamless_test.py; }
tar-retar() { tar -zcvf $1 $2; }
sencha-build() { cd $APORO/static/sencha; sudo sencha app build production; }
sh-opts() {
    if [[ "$1" = "show" ]]; then
        [[ -n $BASH_VERSION ]] && shopt -p
        [[ -n $ZSH_VERSION ]] && setopt
    fi
    }
sh-source() { _orig=`pwd`; source $HOME_ENV/$SHELL_CONFIG; cd $_orig; }
# uuid_new(){
    # python uuid.uuid4().hex[:7]
    # dbus-uuidgen
    # uuidgen -r, uuidgen -t
    # }
ssh_f(){ \
    [[ -n "$(ls-mounts | grep "$1" | wc -l)" ]] && return;
    sudo umount -f /Volumes/$1 > /dev/null 2>&1;
    mkdir -p /Volumes/$1; sshfs $1:/ /Volumes/$1 -o follow_symlinks > /dev/null 2>&1;
    }
ssh_ff(){ \
    [[ -n "$(ls-mounts | grep "$1" | wc -l)" ]] && sudo umount -f /Volumes/$1 > /dev/null 2>&1;
    mkdir -p /Volumes/$1; sshfs $1:/ /Volumes/$1 -o follow_symlinks > /dev/null 2>&1;
    }
to_display_by_redirect(){
    echo $@ > /dev/pts/3
    }
to_display_by_pipe(){
    to_display_by_redirect(){
        echo $@ > /dev/pts/3
        }
    read -r
    while [[ -n $REPLY ]]; do to_display_by_redirect $(printf '%s\n' "$REPLY"); read -r; done
    }
return_line() {
    local lineno=$1
    while (( lineno > 1 )); do read; (( lineno-- )); done
    read -r && printf '%s\n' "$REPLY"
    #
    # TESTS:
    #     return_line 3 <<<$'one\ntwo\nthree\nfour'
    #     printf 'one\ntwo\nthree\nfour' | return_line 3
    #
    }
return_all() {
    read -r
    while [[ -n $REPLY ]]; do printf '%s\n' "$REPLY"; read -r; done
    #
    # TESTS:
    #     printf 'one\ntwo\nthree\nfour' | return_all 3
    #     printf 'one\ntwo\nthree\nfour' | return_all
    #
    }
xclip-copy(){ echo "$@" | xclip; }
xclip-paste(){ xclip -selection clipboard -o; }
xclip-admin(){ ssh admin "echo \"$(xclip-paste)\"|pbcopy"; }
x11-active(){
    [[ $OS_NAME = Linux ]] && env ls -1 /tmp/.X11-unix
    }
vnc-clean(){
    _idx="$1"
    running_pid="$(/bin/ps -awwx -o pid,ppid,comm,args      \
        | env grep -i -E "Xtightvnc[ ][:]$_idx"             \
        | column -t | tr -s " "                             \
        | cut -d ' ' -f1 | tr -s " "    		    \
        )"
    [[ -n $running_pid ]]                                   \
        && kill -9 $running_pid
    sudo rm -fr "/tmp/.X$_idx-lock" "/tmp/.X11-unix/X$_idx"
    }
vnc-reset(){
    _idx="$1"
    vnc_clean $_idx
    eval "vncserver :$_idx"
    }
wh(){ ls $(which "$@"); }
z-retheme() {
    if [[ -n $1 ]]; then
        export ZSH_THEME=$1
        source $ZSH/oh-my-zsh.sh
    fi
    if [[ ! -n $1 ]]; then
        echo "\nUsage: zsh_retheme 'some_theme_name'"
    fi
    }

[[ -n $DEBUG_SHELL ]] && echo "_shared_aliases"

#alias ls='ls --almost-all --human-readable --ignore-backups --format=verbose --indicator-style=file-type --indicator-style=slash | LC_COLLATE=C sort -k9,9 --ignore-case'
# adb shell input text "insert%syour%stext%shere"
# adb shell input keyevent 82
# # keycodes http://developer.android.com/reference/android/view/KeyEvent.html
# adb shell input tap 500 1450
# # Swipe X1 Y1 X2 Y2 [duration(ms)]:
# adb shell input swipe 100 500 100 1450 100
# # LongPress X Y:
# adb shell input swipe 100 500 100 500 250
alias adb-fingerprint="awk '{print $1}' < ~/.android/adbkey.pub | openssl base64 -A -d -a | openssl md5 -c"
alias AP_android='cd $APORO/static/sencha/phonegap/platforms/android/'
alias AP_phonegap_build_android='AP_android; sudo phonegap build android --release;'
alias AP_sencha='cd $APORO/static/sencha/'
alias AP_sencha_build='AP_sencha; sudo sencha app build package;'
alias assign-help='echo "assign some_variable < <(some code)"'
alias BD_env='cd $BD; source ENV/bin/activate'
alias cde='cde_f'
alias chmod_num='stat -c "%a"'
alias close_tcp='fuser -k -n tcp'
alias cmd='compgen -a | grep'
alias colordiff='colordiff --minimal --strip-trailing-cr --text --ignore-blank-lines --ignore-space-change --ignore-all-space --ignore-tab-expansion --ignore-trailing-space --suppress-common-lines --side-by-side'
alias columns='column -t | tr -s " "'
alias convert_pdf='pdftohtml -i -c -xml'
alias countF='ls | wc -l'
alias cy-build='cd $BD/RD/src/cython_exts/; python cy-build.py build_ext -i;'
alias cy-clean='cd $BD/RD/src/cython_exts/; sudo python cy-build.py clean;'
alias cy-folder='cd $BD/RD/src/cython_exts/;'
alias cy-help='cd $BD/RD/src/cython_exts/; python cy-build.py --help-commands;'
alias dir-size='du -Lsh'
alias du='du -L'
alias ec2="ssh -i $HOME_ENV/.ssh/grp1.pem ec2-user@ec2-54-164-189-68.compute-1.amazonaws.com -p 10101"
alias ec2-pg_tunnel='ssh ub3 -L 9088:localhost:8800 -N &'
alias ec2-reboot='aws ec2 reboot-instances --instance-ids i-8206d068'
alias egrep='egrep -i --color=auto'
# NOTE:
#
#   find [ -P | -L | -H ] --> find [ 'never follow symlinks' | 'follow' | 'no follow except attributes when avail.' ]
#
#       of the above flags, the last one used governs
#
# alias find='/usr/bin/find -L'
#
#
alias fgrep='fgrep -i --color=auto'
alias function_names='compgen -A function | sort'
alias get_tty='tty | sed -e "s/.*tty\(.*\)/\1/"'
alias git_sencha='echo "admin" | sudo git clone https://github.com/sethc23/aporo.git -b sencha $HOME_ENV/django/Dropbox/aporo/static/sencha'
alias grep='grep -i --color=auto'
alias grep-folder='grep -r "$1" *'
alias grok-app='ngrok -hostname app.aporodelivery.com 80'
alias grok-mysql='ngrok -proto tcp 3306'
alias grok-printer='ngrok -hostname printer.aporodelivery.com 80'
f-h-c(){ eval "history | awk '{\$1=\$2=\$3=\"\";print}' | sed 's/^   //'"; }
alias h-c='f-h-c'
alias h-c="history | awk '{\$1=\$2=\$3=\"\";print}' | sed 's/^   //'"
f-h-c-g(){ h-c | grep $1; }
alias h-c-g='f-h-c-g'
alias irssi='TERM=screen-256color irssi'
alias killall="killall -9"
alias l-test="printf 'package.loaded.tmp=nil\nt=require\"tmp\"\nt.test()' | luap --"
alias locate='locate -i'
alias locate-info='locate -S'
alias locate-update='sudo /usr/libexec/locate.updatedb'
alias ls='ls --color --almost-all --classify --human-readable --ignore-backups --format=verbose --indicator-style=file-type --indicator-style=slash'
alias mnt='scr_ed; ./System_Control.py servers mnt'
alias mnt_EXT_HD='mkdir -p /Volumes/EXT_HD; $SSHFS ub1:/Volumes/EXT_HD /Volumes/EXT_HD -o ConnectTimeout=5'
alias mysql_cmd='mysql -uroot -pDelivery100%'
alias mysql_config1='echo "money" | sudo emacs /opt/local/etc/mysql55/macports-default.cnf'
alias mysql_config2='echo "money" | sudo emacs /opt/local/etc/mysql55/my.cnf'
alias pb='pastebincl -n'
alias pip-install-force='pip install --ignore-installed --force-reinstall'
alias pip-install-external='pip install --upgrade --allow-all-external --allow-unverified basemap'
alias pip-update='$HOME_ENV/.scripts/update_pip.sh'
alias pip-upgrade-all='pip list --outdated --format=legacy | cut -d" " -f1 | xargs pip install --upgrade'
alias pip-upgrade-pip='pip install -U pip'

# alias ports-listen='sudo lsof -n -i -P | grep LISTEN'
alias ports-listen_2='sudo netstat -ltnp'
alias ports-listen_3='nettop'
alias ports-sockets='netstat -lx'
alias ports-ssh='lsof -i tcp | grep ^ssh'
alias ps-threads-full='pstree'
alias ps='ps -awwx -o %cpu,%mem,start,etime,user,group,ppid,pid,tty,comm,args'
alias pull_shared_scripts='pull_shared_scripts'
alias push_shared_scripts='push_shared_scripts'
alias push_ssh_config='mnt; cp -R $HOME_ENV/.ssh/config /Volumes/mb/Users/admin/.ssh/; cp -R $HOME_ENV/.ssh/config /Volumes/ubuntu/home/ubuntu/.ssh/'
alias pydoc='python -m pydoc'
alias pyprofileread='pyprofileread'
alias pyprofilewrite='pyprofilewrite'
alias redis_config='sudo emacs /opt/local/etc/redis.conf'
alias redis_kill='pkill -f redis-server'
alias redis_run='redis-server /opt/local/etc/redis.conf'
alias restart='sudo shutdown -r now'
alias retar_help='echo retar archive.tar.gz directory/'
alias rsync_all='python $BD/rsync_cmds.py all'
alias rsync_test='python $BD/rsync_cmds.py test'
alias rt_='ssh cisco'
alias rt_nat='rt_ "iptables -t nat -L -v" 2> /dev/null'
alias rt_ps='rt_ "ps" 2> /dev/null'
alias rt_reboot='rt_ reboot'
alias rt_tbl='rt_ "iptables -L -v" 2> /dev/null'
alias scr_d='scr_ed'
alias scr_ed='scr_env; cd $HOME_ENV/.scripts'
alias scr_env='source $HOME_ENV/.scripts/ENV/bin/activate'
alias scr_sync='$HOME_ENV/.scripts/sync_scripts.bash'
alias ssh_config='emacs $HOME_ENV/.ssh/config; push_ssh_config'
alias test_nginx_socket='socat - UNIX-CLIENT:/var/log/nginx.sock'
alias to_log='syslog -s -l error -k Message'
alias topcpu='ps -ero pid=PID,%cpu=CPU,%mem=MEM,comm=CMD | head -15'
alias topmem='ps -emo pid=PID,%cpu=CPU,%mem=MEM,comm=CMD | head -15'
alias umnt='sudo umount -f /Volumes/'
alias untar='tar -zxvf'
alias weechat='TERM=screen-256color weechat'
alias z-local="emacs $SH/local_config/shell/.shell_local"
alias z-omz="emacs $HOME_ENV/.scripts/shell_env/zsh/.z_OMZ"
alias z-source="source $HOME_ENV/.scripts/shell_env/zsh/.z_OMZ; source $HOME_ENV/.scripts/shell_env/_base"


[[ -n $DEBUG_SHELL ]] && echo "_shared_END"


# --------------------------------------------------------------------------
#
#   TODO
#
# --------------------------------------------------------------------------

#function g-RESTORE_LOCAL_F() { \
#    cd $HOME_ENV/$SERVER/local_config/ \
#    ln -s $HOME_ENV/.git/.gitignore ./; \
#   ln -s $HOME_ENV/.git/.gitignore_global ./; \
#   ln -s $HOME_ENV/$SERVER/local_config/.bashrc ./ ; \
#   ln -s $HOME_ENV/$SERVER/local_config/.iterm2 ./ ; \
#   ln -s $HOME_ENV/$SERVER/local_config/.profile ./ ; \
#   ln -s $HOME_ENV/$SERVER/local_config/.bash_profile ./ ;}

# Out Specific Lines
# sed -n '20,40p' file_name
# awk 'FNR>=20 && FNR<=40' file_name

# history | sed -e 's/^[ \t]*//' | sort -u -k4 | sort -k1
# need to standardize column separation and re-split --> see alias 'columns'

