#!/bin/zsh

rsyslog_debug() {
    CMD="sudo /usr/local/sbin/rsyslogd -d -f $SH/rsyslog/config/debug.conf > /tmp/rsyslog_debug"

    exec $CMD
    DEBUG_PID="$(echo $!)"

    if [[ ! -S /dev/log ]]; then
        while true; do
            sleep 2
            [[ -S /dev/log ]] && break
        done
    fi
    sudo kill $DEBUG_PID
    exec $CMD
    DEBUG_PID="$(echo $!)"
    }

alias svc_rsyslog_disable='sudo systemctl disable rsyslog.service syslog.socket; sudo systemctl daemon-reload'
alias svc_rsyslog_enable='sudo systemctl daemon-reload; sudo systemctl enable /lib/systemd/system/rsyslog.service 2> /dev/null; sudo systemctl enable /lib/systemd/system/syslog.socket'
alias svc_rsyslog_start='sudo systemctl start rsyslog.service'
alias svc_rsyslog_stop='sudo systemctl stop rsyslog.service syslog.socket'
alias svc_rsyslog_restart='sudo service rsyslog restart'
alias svc_rsyslog_status='sudo systemctl status rsyslog.service syslog.socket'
alias svc_rsyslog_debug='sudo /usr/local/sbin/rsyslogd -d -f /etc/rsyslog.d/rsyslog.conf -n'
alias svc_rsyslog_debug_check='logger --priority=local0.debug "test"'

alias sl_push_config='sudo $SERV_HOME/syslog-ng/push_syslog_config.bash'
alias sl_start='sl_push_config; sudo /usr/local/sbin/syslog-ng'
alias sl_stop='kill_by syslog-ng; sleep 1; ps -A | grep syslog'
alias sl_config='sudo emacs /usr/local/etc/syslog-ng.conf'
alias sl_reload='sl_stop; sl_push_config; sl_start'
alias sl_debug='sl_push_config; sudo /usr/local/sbin/syslog-ng -Fvvedt'
alias sl_kill='kill_by syslog-ng'
alias sl_tail_all='sudo tail -f /var/log/syslogs/all.log'
alias sl_tail_internal='sudo tail -f /var/log/syslogs/syslog_internal.log'
alias sl_tail_resty='sudo tail -f /var/log/syslogs/resty_logger.log'
alias sl_tail_socat='sudo tail -f /var/log/syslogs/socat.log'
alias sl_tail_syslog='sudo tail -f /var/log/syslog'

sl_tail_syslog_statements() { 
    sudo tail -n 0 -f /var/log/syslog | while read line; do 
    echo $line | grep '#011#011' | sed -r 's/(.*)#011#011(.*)/\2/g'; done; }

sl_tail_syslog_logs() { 
    sudo tail -n 0 -f /var/log/syslog | while read line; do 
    echo $line | grep 'LOG:' | awk '{$1=$2=$3=$4=$5=$6=$7=""; print $0}' \
    | sed 's/^\s*//g' | grep 'LOG:'; done; }

alias sl_tail_syslog_all_else="sudo tail -f /var/log/syslog | grep -v '#011#011' | uniq"

last_log() {
    [[ -n "$BASH_VERSION" ]] && shopt -s extglob
    [[ -n "$ZSH_VERSION" ]] && setopt kshglob

    if [[ "${1:0:1}" = "/" ]]; then
        DIR="$1"
        shift
    else
        DIR="/var/log"
    fi
    HELP_OPT=("-h" "--help")
    if [[ "$1" != "" ]] && [[ $HELP_OPT =~ $1 ]]; then

        echo ""
        echo "EXAMPLES:"
        echo "1. last_log"
        echo ">>>\tlist of files (\"LOG LIST\") in directory $DIR sorted with most recent at bottom"
        echo ""
        echo "2. last_log 2"
        echo ">>>\ttails 2nd file FROM BOTTOM of LOG LIST"
        echo ""
        echo "3. last_log tmp"
        echo ">>>\tsame as (1.) except only listing files (\"TMP LOG LIST\") where filename contains 'tmp' (case insensitive)"
        echo ""
        echo "4. last_log tmp 1"
        echo ">>>\ttails bottom-most file in TMP LOG LIST"
        echo ""
        echo "5. last_log syslog -rsyslog"
        echo ">>>\ttails bottom-most file in TMP LOG LIST"
        echo ""
        echo "6. last_log +syslog -rsyslog -log1 -1"
        echo ">>>\ttails bottom-most file in TMP LOG LIST"
        echo ""
        echo "7. last_log syslog -rsyslog -log1 +1"
        echo ">>>\ttails bottom-most file in TMP LOG LIST"
        echo ""

    else
        # DEFAULTS:
        
        INDEX_START="bottom"                # direction to start counting files from
        TAG_TYPE="include"                  # regex type when tag without "+" and "-"

        # ------------------------------------------------

        last_arg="${@: -1}"
        case $last_arg in
            +(''|[-+])+([0-9]))
                # echo "$last_arg:  digit (w | wo) modifier"
                first_char="${last_arg:0:1}"
                case $first_char in
                    +)
                        index_start="top"
                        log_num="${last_arg:1:${#last_arg}}"
                        ;;
                    -)
                        index_start="bottom"
                        log_num="${last_arg:1:${#last_arg}}"
                        ;;
                    ''|*)
                        index_start="$INDEX_START"
                        log_num="$last_arg"
                        ;;
                esac
                TAGS=${@: 1:$(expr ${#@} - 1)}
                ;;
            *) 
                # echo "$last_arg NOT digit"
                TAGS=${@: 1}
                index_start="$INDEX_START"
                log_num=""
                ;;
        esac
        
        [[ -n "$BASH_VERSION" ]] && TAG_ARR=$TAGS
        [[ -n "$ZSH_VERSION" ]] && TAG_ARR=(${(@s/ /)TAGS})

        TAG_COND=""
        # for tag in "${(@s/ /)TAGS}"; do
        for tag in $TAG_ARR; do
            first_char="${tag:0:1}"
            case $first_char in
                +)
                    tag_type="include"
                    tag="${tag:1:${#tag}}"
                    ;;
                -)
                    tag_type="exclude"
                    tag="${tag:1:${#tag}}"
                    ;;
                *)
                    tag_type="$TAG_TYPE"
                    tag="$tag"
                    ;;
            esac
            
            [[ "$tag_type" = "include" ]] && TAG_COND+=" | env grep -iE \"(.*)$tag([^[:space:]]*)$\""
            [[ "$tag_type" = "exclude" ]] && TAG_COND+=" | env grep -viE \"(.*)$tag([^[:space:]]*)$\""
        done

        LIST_LOGS="env ls -lAtr $DIR | env grep -E \"^-\" | tail -n +2"
        [[ -n "$TAGS" ]] && LIST_LOGS+=$TAG_COND

        # If no $log_num provided, show log list
        if [[ -z "$log_num" ]]; then
            eval ${LIST_LOGS}
        # Else, use $log_num and run socat tail on specific log file
        else
            # Confirm index number is valid
            LOG_LIST_COUNT="$LIST_LOGS"" | wc -l"
            [[ $log_num -gt $(eval ${LOG_LIST_COUNT}) ]] && echo "Index Number exceeds log list count." && exit 99

            # Get nth log file from (top if modifier = "+", bottom is modifier = "-") where n=$log_num
            GET_LOG_FNAME="$LIST_LOGS"" | column -t | tr -s \" \" | cut -d ' '  -f9-"        
            [[ "$index_start" = "top" ]] && GET_LOG_FNAME+="$TAG_COND"" | head -n $log_num | tail -n 1"
            [[ "$index_start" = "bottom" ]] && GET_LOG_FNAME+="$TAG_COND"" | tail -n $log_num  | head -n 1"
            log="$DIR/""$(eval ${GET_LOG_FNAME})"

            # Confirm logfile is actually a file
            test ! -f "$log" && echo "'$log' is not a file" && exit 99


            # BUILD CMD
            CMD=""
            SOCAT_CMD="socat "
            SOCAT_LEFT="$log,nonblock,ignoreeof,seek-end"
            SOCAT_RIGHT="-"

            # If not readable, request root credentials (testing now to allow disrupting log display command)
            test ! -r "$log" && sudo -v && CMD+="sudo "

            # If large file, limit previous seek
            [[ $(stat -c '%s' $log) -gt 1000 ]] && SOCAT_LEFT+=",seek-end,seek-cur=-1000"


            CMD+=" $SOCAT_CMD $SOCAT_LEFT $SOCAT_RIGHT"

            # log="$DIR/""$(env ls -At $DIR | head -n +$log_num | tail -n 1)"
            printf "\e]1337;SetBadgeFormat=%s\a" \
                $(echo -n "$log" | base64)

            printf "\n\n%s\n\n" "$log"
            trap "" TERM INT QUIT
            if [[ $(stat -c '%s' $log) -gt 1000 ]]; then
                eval {} 
            else
                sudo socat $log,nonblock,ignoreeof -
            fi

            printf "\e]1337;SetBadgeFormat=%s\a" \
                $(echo -n "\(user.gitRepo):\(user.gitBranch):\(user.gitBranchTag)" | base64)
        fi        
    fi
    }
alias sl_last_log='last_log /var/log/syslogs'
