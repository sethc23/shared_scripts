#!/bin/zsh

source_sub_dir() {
    for d in `env find $1/ -mindepth 1 -maxdepth 2 -type d | sort`; do
        for j in `env find $d -maxdepth 1 -type f | sort`; do 
            source $j
        done
    done
    }
source_files(){
    for i in `env find $1 -maxdepth 1 -type f | sort`; do source $i; done
    }
source_files_and_sub_dirs() {
    source_files "$1"
    source_sub_dir "$1"
    }

if [[ -n "$HOME_ENV" ]]; then
    BASE_DIR="$HOME_ENV/.scripts/shell_env"
else

    [[ -n "$SUDO_USER" ]] && export DISABLE_AUTO_UPDATE=true && export HOME_ENV="$(eval echo ~$SUDO_USER)"
    [[ -z "$SUDO_USER" ]] && export HOME_ENV="$(eval echo ~$USER)"

    if [[ -n "$HOME_ENV" ]]; then
        BASE_DIR="$HOME_ENV/.scripts/shell_env"
    else
        if [[ -n "$BASH_VERSION" ]]; then
            SOURCE="${BASH_SOURCE[0]}"
            while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
                DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
                SOURCE="$(readlink "$SOURCE")"
                [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
            done
            BASE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        fi
        [[ -n "$ZSH_VERSION" ]] && BASE_DIR=${0:a:h}
    fi

    [[ -z "$HOME_ENV" ]] && export HOME_ENV="$(eval echo ~$USER)"

fi

source "$HOME_ENV/.profile"
source_files "$BASE_DIR/shell"
source_files_and_sub_dirs "$BASE_DIR/shared"

_env=$(uname -a)
[[ -n $(echo $_env | grep "Darwin") ]] && source_files_and_sub_dirs "$BASE_DIR/osx"
[[ -n $(echo $_env | grep "Linux") ]] && source_files_and_sub_dirs "$BASE_DIR/linux"







