
function newalias_linux() {         echo "alias "$1 >> $HOME/.alias_linux; source_bash; push_linux_aliases; }
function ib_konnect() {             sudo $IPY/ENV/bin/ipython console --existing \
    $HOME/.ipython/profile_default/security/kernel-$1.json; kill $1;}

alias scr_env='source $HOME/.scripts/ENV/bin/activate'
alias scr_ed='scr_env; cd $HOME/.scripts'

function aporo_env() {              source $APORO/ENV/bin/activate; }
function aporo() {                  cd $APORO; aporo_env; }
function aporo_ib() {               aporo; ipython; }
function aprinto() {                cd $APRINTO; source $APRINTO/ENV/bin/activate; }
function aprinto_test() {           aprinto; behave tests/features/ > /dev/null 2>&1; }
function aprinto_test_production() { aprinto; behave tests/features/ --tags=production > /dev/null 2>&1; }
function aprinto_fwd_off() {        scr_ed; python System_Control.py settings aprinto fwd_order_false; }
function aprinto_fwd_on() {         scr_ed; python System_Control.py settings aprinto fwd_order_true; }
function aprinto_fwd_chk() {        cat $SERV_HOME/aprinto/aprinto_settings.py | grep FWD_ORDER; }

function aprinto_behave_txt_off() { scr_ed; python System_Control.py settings aprinto behave_txt_false; }
function aprinto_behave_txt_on() {  scr_ed; python System_Control.py settings aprinto behave_txt_true; }
function aprinto_behave_txt_chk() { cat $SERV_HOME/aprinto/aprinto_settings.py | grep BEHAVE_TXT; }

function aprinto_celery_txt_off() { scr_ed; python System_Control.py settings aprinto celery_txt_false; }
function aprinto_celery_txt_on() {  scr_ed; python System_Control.py settings aprinto celery_txt_true; }
function aprinto_celery_txt_chk() { cat $SERV_HOME/aprinto/aprinto_settings.py | grep CELERY_TXT; }

function aprinto_txt_off() {        aprinto_behave_txt_off; aprinto_celery_txt_off; }
function aprinto_txt_on() {         aprinto_behave_txt_on; aprinto_celery_txt_on; }
function aprinto_txt_chk() {        aprinto_behave_txt_chk; aprinto_celery_txt_chk; }

function serv() {                   cd $GIT_SERV_HOME/celery; source ENV/bin/activate; }
function serv_test_debug() {        serv; cd git_serv; behave tests/features/ --stop --tags=debug; }
function serv_test_dev() {          serv; cd git_serv; behave tests/features/ --stop --tags=dev; }
function serv_test_framework() {    serv; cd git_serv; behave tests/features/ --stop --tags=framework > /dev/null 2>&1; }
function serv_test_production() {   serv; cd git_serv; behave tests/features/ --stop --tags=production > /dev/null 2>&1; }
function serv_behave_on() {         serv; cd git_serv; python git_serv_tasks.py settings gitserv behave_verification_true; }
function serv_behave_false() {      serv; cd git_serv; python git_serv_tasks.py settings gitserv behave_verification_false; }
function serv_behave_chk() {        cat $GIT_SERV_HOME/celery/git_serv/git_serv_settings.py | grep BEHAVE_VERIFICATION; }
function serv_txt_on() {            serv; cd git_serv; python git_serv_tasks.py settings gitserv gitserv_txt_true; }
function serv_txt_false() {         serv; cd git_serv; python git_serv_tasks.py settings gitserv gitserv_txt_false; }
function serv_txt_chk() {           cat $GIT_SERV_HOME/celery/git_serv/git_serv_settings.py | grep GITSERV_TXT; }
function serv_growl_on() {          serv; cd git_serv; python git_serv_tasks.py settings gitserv gitserv_growl_true; }
function serv_growl_false() {       serv; cd git_serv; python git_serv_tasks.py settings gitserv gitserv_growl_false; }
function serv_growl_chk() {         cat $GIT_SERV_HOME/celery/git_serv/git_serv_settings.py | grep GITSERV_GROWL; }

alias BT_off='sudo /etc/init.d/bluetooth stop'
alias BT_on='sudo /etc/init.d/bluetooth start'
alias BT_restart='sudo /etc/init.d/bluetooth restart'

function path_of_pid_f() { readlink -f /proc/$1/exe; }
alias path_of_pid='path_of_pid_f'
alias chk_filesystem_types='sudo blkid'
alias emacs='emacs -nw'
alias semacs='sudo emacs -nw'

alias jupyter_nbconvert='jupyter-nbconvert --to=notebook --nbformat=3 --inplace /home/ub2/SERVER2/ipython/notebooks/'



alias ipt='sudo iptables -nL -v'
alias ipt_flush='sudo iptables -F'
alias ipt_nat='sudo iptables -t nat -nL -v'
alias ipt_nat_flush='sudo iptables -t nat -F'
alias ipt_proxy='sudo iptables -t nat -I OUTPUT 1 -o eth0 -m owner \! --gid-owner 1003 -p tcp --match multiport --dports 80,443 -j REDIRECT --to-port 10052'
alias ipt_proxy_2='sudo iptables -t nat -I PREROUTING 1 -o eth0 -m owner \! --gid-owner 1003 -p tcp --match multiport --dports 80,443 -j REDIRECT --to-port 10052'


function m_proxy_eth() { \
    ipt_flush; \
    ipt_nat_flush; \
    sudo iptables -t nat -I OUTPUT -o eth0 -p tcp -m owner \! --uid-owner mitmproxy --dport 80 -j REDIRECT --to-port 10052; \
    sudo iptables -t nat -I OUTPUT -o eth0 -p tcp -m owner \! --uid-owner mitmproxy --dport 443 -j REDIRECT --to-port 10052; \
    sudo -u mitmproxy mitmweb --transparent -wport=11152 --wiface=eth0 --wfile=mitm_res.out --wdebug --port 10052 && sudo iptables -t nat -F;
}

function m_proxy_tun() { \
    ipt_flush; \
    ipt_nat_flush; \
    sudo iptables -t nat -I OUTPUT 1 -o tun0 -m owner \! --uid-owner mitmproxy -p tcp --dport 80 -j REDIRECT --to-port 10052; \
    sudo iptables -t nat -I OUTPUT 1 -o tun0 -m owner \! --uid-owner mitmproxy -p tcp --dport 443 -j REDIRECT --to-port 10052; \
    #sudo -u mitmproxy mitmproxy --transparent --port 10052 --eventlog --intercept '.*' && sudo iptables -t nat -F; \
    sudo -u mitmproxy mitmweb --transparent -wport=11152 --wiface=eth0 --wfile=mitm_res.out --wdebug --port 10052 && sudo iptables -t nat -F;
}

function f_kill_by() {              sudo kill -9 `ps -ef | grep $1 | awk '{print $2}'`; }
alias kill_by='f_kill_by'

alias mail_old='mail -f ~/mbox'

alias locate_update='sudo /usr/bin/updatedb'
alias ls='ls --color --almost-all --classify --human-readable --ignore-backups --format=verbose --indicator-style=file-type --indicator-style=slash'
#alias ls='ls --almost-all --human-readable --ignore-backups --format=verbose --indicator-style=file-type --indicator-style=slash | LC_COLLATE=C sort -k9,9 --ignore-case'
alias red_keys='redis-cli -h localhost -p 6379 -n 0 keys \*'

alias rq_status='sudo rabbitmqctl status'
alias cel_env='cd $SERV_HOME/aprinto; source ENV/bin/activate'
alias rq_cel_run='cel_env; celery -A --app=sync_app --workdir=$SERV_HOME/aprinto/celery worker --loglevel=info'
alias rq_cel_purge='cel_env; celery purge -f --broker=amqp://ub2:mq_money@localhost:5672//'
alias rq_start='sudo service rabbitmq-server start'
alias rq_stop='sudo service rabbitmq-server stop'
alias rq_restart='sudo service rabbitmq-server restart'
alias rq_config='sudo emacs /etc/rabbitmq/rabbitmq.config'
alias rq_q='sudo rabbitmqctl list_queues'
alias rq_x='sudo rabbitmqctl list_exchanges'
alias rq_b='sudo rabbitmqctl list_bindings'
alias rq_c='sudo rabbitmqctl list_consumers'
alias rq_r='sudo rabbitmqctl report'
alias rq_tail_start_err='sudo tail -n 50 -f /var/log/rabbitmq/startup_err'
alias rq_remaining='sudo rabbitmqctl list_queues name messages messages_ready messages_unacknowledged'

alias ng_kill='sudo pkill -f nginx'
alias ng_kill_2='sudo fuser -k 80/tcp'
alias ng_push_config='$SERV_HOME/nginx/push_ng_config.bash'
alias ng_tail_t_access='sudo tail -f /var/log/syslogs/tmp_ngx_access.log'
alias ng_tail_t_err='sudo tail -f /var/log/syslogs/tmp_ngx_error.log'

function ng_tail_t_err_logger() { sudo tail -n 0 -f /var/log/syslogs/tmp_ngx_error.log | while read line; \
    do echo $line | grep '#>>>' | sed -ur 's/.*(#>>> )(.*)( <<<#).*/\2/g'; done; }
function ng_tail_t_err_logger_w() { sudo tail -n 0 -f /var/log/syslogs/tmp_ngx_error_warn.log | while read line; \
    do echo $line | grep '#>>>' | sed -ur 's/.*(#>>> )(.*)( <<<#).*/\2/g'; done; }

function pgsql_tail_info_logger() { :> /tmp/tmplog; tail -n 0 -f /tmp/tmplog | while read line; \
    do echo $line | grep '^[[:alnum:]]' | grep -e '- INFO - LOG:' | sed -ur 's/^(.*)(- INFO - LOG: )(.*)$/\3/g'; done; }

# -------------------------------<<<
# -------------------------------<<<


alias ports_listen='sudo lsof -n -i -P | grep LISTEN'
alias ports_listen_2='sudo netstat -ltnp'

alias ps='ps -ef'

alias pydoc='python -m pydoc'

alias show_temp='sensors'

alias sl_push_config='sudo $SERV_HOME/syslog-ng/push_syslog_config.bash'
alias sl_start='sl_push_config; sudo /usr/local/sbin/syslog-ng'
alias sl_stop='kill_by syslog-ng; sleep 1; ps -A | grep syslog'
alias sl_config='sudo emacs /usr/local/etc/syslog-ng.conf'
alias sl_reload='sl_stop; sl_push_config; sl_start'
alias sl_debug='sl_push_config; sudo /usr/local/sbin/syslog-ng -Fvvedt'
alias sl_kill='kill_by syslog-ng'
alias sl_tail_all='sudo tail -f /var/log/syslogs/all.log'
alias sl_tail_internal='sudo tail -f /var/log/syslogs/syslog_internal.log'
alias sl_tail_resty='sudo tail -f /var/log/syslogs/resty_logger.log'
alias sl_tail_socat='sudo tail -f /var/log/syslogs/socat.log'
alias sl_tail_syslog='sudo tail -f /var/log/syslog'

function sl_tail_syslog_statements() { sudo tail -n 0 -f /var/log/syslog | while read line; do echo $line \
    | grep '#011#011' | sed -r 's/(.*)#011#011(.*)/\2/g'; done; }

function sl_tail_syslog_logs() { sudo tail -n 0 -f /var/log/syslog | while read line; \
    do echo $line | grep 'LOG:' | awk '{$1=$2=$3=$4=$5=$6=$7=""; print $0}' \
    | sed 's/^\s*//g' | grep 'LOG:'; done; }

alias sl_tail_syslog_all_else="sudo tail -f /var/log/syslog | grep -v '#011#011' | uniq"

alias svc_pgsql_load='sudo service postgresql start'
alias svc_pgsql_unload='sudo service postgresql stop'
alias svc_pgsql_restart='sudo service postgresql restart'

alias svc_rsyslog_load='sudo service rsyslog start'
alias svc_rsyslog_unload='sudo service rsyslog stop'
alias svc_rsyslog_restart='sudo service rsyslog restart'

#-- SUPERVISOR --#
function sv_push_config() { sl_push_config; sudo $SERV_HOME/supervisor_root/push_sv_config_root.bash; }
alias sv_reset='sv_push_config && sv_ctl reread && sv_ctl update'
alias sv_s='sv_ctl status'
alias sv_tail='sudo tail -n 100 -f /var/log/syslogs/supervisor.log'
alias sv_ctl='sudo supervisorctl -s unix:///var/sockets/supervisor_root.sock'
alias sv_update='sudo supervisorctl -s unix:///var/sockets/supervisor_root.sock reread && sudo supervisorctl -s unix:///var/sockets/supervisor_root.sock update'
alias sv_load='sv_push_config; sudo systemctl start supervisord.service'
alias sv_unload='sudo systemctl stop supervisord.service'
alias sv_reload='sv_push_config; sudo systemctl daemon-reload; sudo systemctl restart supervisord.service'

alias uuid_random='uuidgen -r'
alias uuid_time='uuidgen -t'
alias uuid=uuid_random

alias S='kill_by syslog-ng; printf "" | printf "Checking processes..." | ps -A | grep syslog-ng | grep -v grep; sl_push_config; sudo syslog-ng;'

alias topcpu='env ps -wx -o pid=PID,%cpu=CPU,%mem=MEM,comm=CMD | head -15'

alias vi='vim'
alias y_installed='yum list'
alias y_update='sudo yum -y update'

alias N='ng_push_config; ng_reload;'
alias SK='sl_kill'
alias ap_update='sudo apt-get update'
alias ap_install='sudo apt-get install -y'
function ap_remove_f() { \
    sudo apt-get purge $1 && sudo apt-get --purge autoremove; }
alias ap_remove='ap_remove_f'
function ap_clean_f() { \
    sudo apt-get clean && sudo apt-get autoremove; \
    sudo apt-get -f install; \
    sudo dpkg --configure -a; }
alias ap_clean='ap_clean_f'
alias ap_upgrade='sudo apt-get upgrade -y'
function ap_upgrade_list() { sudo apt-get --just-print upgrade 2>&1 | perl -ne 'if (/Inst\s([\w,\-,\d,\.,~,:,\+]+)\s\[([\w,\-,\d,\.,~,:,\+]+)\]\s\(([\w,\-,\d,\.,~,:,\+]+)\)? /i) {print "PROGRAM: $1 INSTALLED: $2 AVAILABLE: $3\n"}' | column -t; }
alias ap_policy='sudo apt-cache policy'
function ap_debug_install() { ap_install $(sudo bash /etc/apt/debug_resources/list-dbgsym-packages.sh -t -p $(pidof -s $1)); }
alias ap_search='apt search'
alias ap_files='apt-file list'

alias chkconfig='sudo sysv-rc-conf'
alias email='mutt -a /tmp/backup.xml -s "tasker" -- seth.t.chase@gmail.com'
alias dns_update='$SERV_HOME/dns/godaddy.py'
alias disable_wifi='sudo ifconfig wlan0 down'
alias blog_serv_local='github-pages check-health && bundle update && bundle exec jekyll serve --baseurl "" --port 4000'
